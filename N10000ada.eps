%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: N10000ada.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: tieri
%%CreationDate: 12/14/2015, 11:22:11 AM
%%BoundingBox: 0 0 310 245
%%HiResBoundingBox: 0 0 310 245
%%CropBox: 0 0 310 245
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 21554 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
   xmp:CreatorTool="Adobe Illustrator CS5"
   xmp:ModifyDate="2015-12-14T11:16:31-07:00"
   xmp:CreateDate="2015-12-14T11:16:31-06:00"
   xmp:MetadataDate="2015-12-14T11:16:31-07:00"
   pdf:Producer="Adobe PDF library 9.90"
   dc:format="application/pdf"
   xmpMM:DocumentID="xmp.did:C28A03CC8EA2E5119980EE179807D835"
   xmpMM:InstanceID="uuid:a91cf107-30f8-408b-9784-034feef18dc1"
   xmpMM:OriginalDocumentID="uuid:efe44ee9-1758-40d9-a03c-eeb1dcd59cef"
   xmpMM:RenditionClass="proof:pdf"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="220"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA3AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqwjVPzh8iab5&#xA;stdAuNd0qNXhvW1C5k1C3T6pcWcsEa28qlvheT1pNmIP7s7HeirNwQRUbg9DirsVdirsVUL6/sdP&#xA;s5r2/uIrSzt1Mk9zO6xxRoOrO7kKoHiTiro7+xlsVv4riJ7F4hOl2rqYWhK8xIJAeJQrvyrSmKrb&#xA;LU9NvrCPUbK7hutPmT1IryGRZIXT+ZZFJUr7g4qg9H82eVtbnnt9G1mx1O4taG5hs7mG4eME0HNY&#xA;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&#xA;irsVdirsVdirsVdirsVdirsVdirsVf/Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">N10000ada</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>tieri</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:2e8e784a-925d-4cc0-813b-374abb412429"
    stRef:documentID="uuid:efe44ee9-1758-40d9-a03c-eeb1dcd59cef"
    stRef:originalDocumentID="uuid:efe44ee9-1758-40d9-a03c-eeb1dcd59cef"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:C28A03CC8EA2E5119980EE179807D835"
      stEvt:when="2015-12-14T11:16:29-07:00"
      stEvt:softwareAgent="Adobe Illustrator CS5"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="310.000000"
    stDim:h="245.000000"
    stDim:unit="Points"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="ArialMT"
      stFnt:fontFamily="Arial"
      stFnt:fontFace="Regular"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 5.21"
      stFnt:composite="False"
      stFnt:fontFileName="arial.ttf"/>
     <rdf:li
      stFnt:fontName="Arial-ItalicMT"
      stFnt:fontFamily="Arial"
      stFnt:fontFace="Italic"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 5.21"
      stFnt:composite="False"
      stFnt:fontFileName="ariali.ttf"/>
     <rdf:li
      stFnt:fontName="MathematicaSans"
      stFnt:fontFamily="MathematicaSans"
      stFnt:fontType="Unknown"
      stFnt:versionString="Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895"
      stFnt:composite="False"
      stFnt:fontFileName="MyriadPro-Regular.otf"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -245 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 245 li
310 245 li
310 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
32 179 mo
223 179 li
223 39 li
32 39 li
cp
clp
3 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
32.895 163.801 mo
33.043 163.793 li
33.191 163.781 li
33.492 163.758 li
34.086 163.715 li
67.846 161.155 100.713 156.112 126.996 132.715 cv
132.199 127.852 li
137.312 122.48 li
142.082 116.91 li
156.061 99.7858 166.069 80.3008 177.102 61.2848 cv
177.176 61.1558 li
177.621 60.4058 li
179.353 57.4798 181.144 54.5838 183.07 51.7808 cv
184.359 49.9688 li
184.441 49.8588 li
184.52 49.7498 li
184.684 49.5308 li
186.837 46.7058 190.831 41.5648 194.922 41.5268 cv
194.996 41.5268 li
195.07 41.5308 li
195.141 41.5308 li
195.363 41.5428 li
199.087 41.8658 201.426 46.3368 202.785 49.2418 cv
202.859 49.4098 li
202.934 49.5738 li
203.082 49.9178 li
206.055 56.9948 207.624 64.5708 209.117 72.0698 cv
209.281 72.9258 li
209.605 74.6878 li
214.46 102.69 216.704 131.457 218.898 159.766 cv
219.047 161.797 li
219.344 165.934 li
219.937 174.531 li
220.18 178.312 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.00695811 .984924 .984283 .00329595 cmyk
@
grestore
gsave
32 179 mo
219.999 179 li
219.999 62 li
32 62 li
cp
clp
3 lw
2 lc
0 lj
3.25 ml
[7.296 7.296 ] 0 dsh
true sadj
32.895 164.102 mo
33.043 164.094 li
33.191 164.082 li
33.492 164.062 li
34.086 164.028 li
35.281 163.946 li
37.668 163.782 li
42.844 163.379 li
47.676 162.946 li
52.414 162.461 li
57.551 161.86 li
62.348 161.211 li
67.547 160.411 li
72.648 159.5 li
77.41 158.532 li
82.57 157.329 li
87.391 156.039 li
92.113 154.606 li
97.238 152.832 li
102.023 150.95 li
107.207 148.625 li
112.297 146.024 li
117.043 143.282 li
122.191 139.922 li
126.996 136.395 li
132.199 132.106 li
137.312 127.395 li
142.082 122.531 li
147.25 116.734 li
152.078 110.844 li
156.812 104.657 li
161.945 97.5656 li
166.734 90.7336 li
171.93 83.3436 li
177.027 76.4796 li
177.621 75.7296 li
178.215 74.9966 li
179.402 73.5696 li
179.551 73.3976 li
179.699 73.2236 li
180 72.8826 li
180.594 72.2146 li
181.781 70.9406 li
181.863 70.8586 li
181.941 70.7766 li
182.105 70.6126 li
182.426 70.2886 li
183.07 69.6676 li
183.152 69.5896 li
183.23 69.5166 li
183.395 69.3676 li
183.715 69.0746 li
184.359 68.5166 li
184.441 68.4496 li
184.52 68.3826 li
184.684 68.2496 li
185.004 67.9966 li
185.648 67.5126 li
185.73 67.4536 li
185.809 67.3976 li
185.973 67.2856 li
186.293 67.0696 li
186.938 66.6676 li
187.012 66.6246 li
187.09 66.5816 li
187.238 66.4966 li
187.539 66.3356 li
187.613 66.3006 li
187.84 66.1876 li
188.141 66.0466 li
188.215 66.0166 li
188.293 65.9836 li
188.441 65.9216 li
188.742 65.8056 li
188.816 65.7766 li
188.895 65.7496 li
189.043 65.6996 li
189.344 65.6086 li
189.418 65.5856 li
189.496 65.5656 li
189.645 65.5266 li
189.719 65.5126 li
189.797 65.4926 li
190.02 65.4446 li
190.098 65.4346 li
190.172 65.4176 li
190.32 65.3946 li
190.398 65.3876 li
190.473 65.3746 li
190.621 65.3586 li
190.699 65.3516 li
190.773 65.3486 li
190.848 65.3396 li
190.922 65.3356 li
191 65.3316 li
191.074 65.3316 li
191.148 65.3286 li
191.375 65.3286 li
191.449 65.3316 li
191.527 65.3356 li
191.75 65.3486 li
191.973 65.3716 li
192.047 65.3826 li
192.121 65.3916 li
192.195 65.4016 li
192.34 65.4306 li
192.414 65.4406 li
192.488 65.4566 li
192.637 65.4926 li
192.711 65.5076 li
192.785 65.5266 li
192.93 65.5696 li
193.227 65.6636 li
193.375 65.7186 li
193.52 65.7766 li
193.668 65.8396 li
193.816 65.9066 li
194.109 66.0506 li
194.184 66.0936 li
194.258 66.1326 li
194.406 66.2186 li
194.699 66.3976 li
194.996 66.6016 li
195.289 66.8246 li
195.438 66.9406 li
195.586 67.0616 li
195.879 67.3246 li
196.469 67.9106 li
196.551 67.9966 li
196.629 68.0816 li
196.789 68.2626 li
197.109 68.6446 li
197.191 68.7426 li
197.27 68.8436 li
197.43 69.0506 li
197.75 69.4836 li
197.828 69.5986 li
197.91 69.7106 li
198.07 69.9446 li
198.391 70.4376 li
199.031 71.5076 li
199.109 71.6516 li
199.191 71.7966 li
199.352 72.0896 li
199.668 72.7036 li
200.309 74.0316 li
200.391 74.2066 li
200.469 74.3876 li
200.629 74.7466 li
200.949 75.4966 li
201.59 77.1046 li
201.664 77.3006 li
201.738 77.4996 li
201.887 77.9066 li
202.188 78.7376 li
202.785 80.5126 li
202.859 80.7466 li
202.934 80.9766 li
203.082 81.4536 li
203.383 82.4306 li
203.977 84.4966 li
204.055 84.7666 li
204.129 85.0356 li
204.277 85.5856 li
204.574 86.7146 li
205.172 89.1016 li
206.367 94.3876 li
206.449 94.7726 li
206.527 95.1606 li
206.691 95.9446 li
207.016 97.5596 li
207.66 100.957 li
207.742 101.398 li
207.824 101.844 li
207.984 102.747 li
208.309 104.599 li
208.957 108.48 li
209.039 108.984 li
209.117 109.497 li
209.281 110.523 li
209.605 112.629 li
210.25 117.047 li
211.547 126.754 li
211.621 127.36 li
211.695 127.969 li
211.848 129.196 li
212.148 131.707 li
212.754 136.942 li
213.965 148.305 li
214.039 149.055 li
214.113 149.812 li
214.266 151.34 li
214.566 154.457 li
215.172 160.946 li
216.383 174.973 li
216.457 175.879 li
216.531 176.793 li
216.652 178.312 li
false sop
.00695811 .984924 .984283 .00329595 cmyk
@
grestore
gsave
0 0 mo
310 0 li
310 245 li
0 245 li
cp
clp
108.125 148 mo
108.125 146.641 107.586 145.336 106.625 144.375 cv
105.664 143.414 104.359 142.875 103 142.875 cv
101.641 142.875 100.336 143.414 99.375 144.375 cv
98.414 145.336 97.875 146.641 97.875 148 cv
97.875 149.359 98.414 150.664 99.375 151.625 cv
100.336 152.586 101.641 153.125 103 153.125 cv
104.359 153.125 105.664 152.586 106.625 151.625 cv
107.586 150.664 108.125 149.359 108.125 148 cv
false sop
.751003 .677302 .668788 .89218 cmyk
ef
.75 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
108.125 148 mo
108.125 146.641 107.586 145.336 106.625 144.375 cv
105.664 143.414 104.359 142.875 103 142.875 cv
101.641 142.875 100.336 143.414 99.375 144.375 cv
98.414 145.336 97.875 146.641 97.875 148 cv
97.875 149.359 98.414 150.664 99.375 151.625 cv
100.336 152.586 101.641 153.125 103 153.125 cv
104.359 153.125 105.664 152.586 106.625 151.625 cv
107.586 150.664 108.125 149.359 108.125 148 cv
cp
0 0 0 0 cmyk
@
126.125 137 mo
126.125 135.641 125.586 134.336 124.625 133.375 cv
123.664 132.414 122.359 131.875 121 131.875 cv
119.641 131.875 118.336 132.414 117.375 133.375 cv
116.414 134.336 115.875 135.641 115.875 137 cv
115.875 138.359 116.414 139.664 117.375 140.625 cv
118.336 141.586 119.641 142.125 121 142.125 cv
122.359 142.125 123.664 141.586 124.625 140.625 cv
125.586 139.664 126.125 138.359 126.125 137 cv
.751003 .677302 .668788 .89218 cmyk
ef
126.125 137 mo
126.125 135.641 125.586 134.336 124.625 133.375 cv
123.664 132.414 122.359 131.875 121 131.875 cv
119.641 131.875 118.336 132.414 117.375 133.375 cv
116.414 134.336 115.875 135.641 115.875 137 cv
115.875 138.359 116.414 139.664 117.375 140.625 cv
118.336 141.586 119.641 142.125 121 142.125 cv
122.359 142.125 123.664 141.586 124.625 140.625 cv
125.586 139.664 126.125 138.359 126.125 137 cv
cp
0 0 0 0 cmyk
@
147.125 116 mo
147.125 114.641 146.586 113.336 145.625 112.375 cv
144.664 111.414 143.359 110.875 142 110.875 cv
140.641 110.875 139.336 111.414 138.375 112.375 cv
137.414 113.336 136.875 114.641 136.875 116 cv
136.875 117.359 137.414 118.664 138.375 119.625 cv
139.336 120.586 140.641 121.125 142 121.125 cv
143.359 121.125 144.664 120.586 145.625 119.625 cv
146.586 118.664 147.125 117.359 147.125 116 cv
.751003 .677302 .668788 .89218 cmyk
ef
147.125 116 mo
147.125 114.641 146.586 113.336 145.625 112.375 cv
144.664 111.414 143.359 110.875 142 110.875 cv
140.641 110.875 139.336 111.414 138.375 112.375 cv
137.414 113.336 136.875 114.641 136.875 116 cv
136.875 117.359 137.414 118.664 138.375 119.625 cv
139.336 120.586 140.641 121.125 142 121.125 cv
143.359 121.125 144.664 120.586 145.625 119.625 cv
146.586 118.664 147.125 117.359 147.125 116 cv
cp
0 0 0 0 cmyk
@
160.125 98 mo
160.125 96.641 159.586 95.336 158.625 94.375 cv
157.664 93.414 156.359 92.875 155 92.875 cv
153.641 92.875 152.336 93.414 151.375 94.375 cv
150.414 95.336 149.875 96.641 149.875 98 cv
149.875 99.359 150.414 100.664 151.375 101.625 cv
152.336 102.586 153.641 103.125 155 103.125 cv
156.359 103.125 157.664 102.586 158.625 101.625 cv
159.586 100.664 160.125 99.359 160.125 98 cv
.751003 .677302 .668788 .89218 cmyk
ef
160.125 98 mo
160.125 96.641 159.586 95.336 158.625 94.375 cv
157.664 93.414 156.359 92.875 155 92.875 cv
153.641 92.875 152.336 93.414 151.375 94.375 cv
150.414 95.336 149.875 96.641 149.875 98 cv
149.875 99.359 150.414 100.664 151.375 101.625 cv
152.336 102.586 153.641 103.125 155 103.125 cv
156.359 103.125 157.664 102.586 158.625 101.625 cv
159.586 100.664 160.125 99.359 160.125 98 cv
cp
0 0 0 0 cmyk
@
173.125 75 mo
173.125 73.641 172.586 72.336 171.625 71.375 cv
170.664 70.414 169.359 69.875 168 69.875 cv
166.641 69.875 165.336 70.414 164.375 71.375 cv
163.414 72.336 162.875 73.641 162.875 75 cv
162.875 76.359 163.414 77.664 164.375 78.625 cv
165.336 79.586 166.641 80.125 168 80.125 cv
169.359 80.125 170.664 79.586 171.625 78.625 cv
172.586 77.664 173.125 76.359 173.125 75 cv
.751003 .677302 .668788 .89218 cmyk
ef
173.125 75 mo
173.125 73.641 172.586 72.336 171.625 71.375 cv
170.664 70.414 169.359 69.875 168 69.875 cv
166.641 69.875 165.336 70.414 164.375 71.375 cv
163.414 72.336 162.875 73.641 162.875 75 cv
162.875 76.359 163.414 77.664 164.375 78.625 cv
165.336 79.586 166.641 80.125 168 80.125 cv
169.359 80.125 170.664 79.586 171.625 78.625 cv
172.586 77.664 173.125 76.359 173.125 75 cv
cp
0 0 0 0 cmyk
@
184.125 56 mo
184.125 54.641 183.586 53.336 182.625 52.375 cv
181.664 51.414 180.359 50.875 179 50.875 cv
177.641 50.875 176.336 51.414 175.375 52.375 cv
174.414 53.336 173.875 54.641 173.875 56 cv
173.875 57.359 174.414 58.664 175.375 59.625 cv
176.336 60.586 177.641 61.125 179 61.125 cv
180.359 61.125 181.664 60.586 182.625 59.625 cv
183.586 58.664 184.125 57.359 184.125 56 cv
.751003 .677302 .668788 .89218 cmyk
ef
184.125 56 mo
184.125 54.641 183.586 53.336 182.625 52.375 cv
181.664 51.414 180.359 50.875 179 50.875 cv
177.641 50.875 176.336 51.414 175.375 52.375 cv
174.414 53.336 173.875 54.641 173.875 56 cv
173.875 57.359 174.414 58.664 175.375 59.625 cv
176.336 60.586 177.641 61.125 179 61.125 cv
180.359 61.125 181.664 60.586 182.625 59.625 cv
183.586 58.664 184.125 57.359 184.125 56 cv
cp
0 0 0 0 cmyk
@
194.125 44 mo
194.125 42.641 193.586 41.336 192.625 40.375 cv
191.664 39.414 190.359 38.875 189 38.875 cv
187.641 38.875 186.336 39.414 185.375 40.375 cv
184.414 41.336 183.875 42.641 183.875 44 cv
183.875 45.359 184.414 46.664 185.375 47.625 cv
186.336 48.586 187.641 49.125 189 49.125 cv
190.359 49.125 191.664 48.586 192.625 47.625 cv
193.586 46.664 194.125 45.359 194.125 44 cv
.751003 .677302 .668788 .89218 cmyk
ef
194.125 44 mo
194.125 42.641 193.586 41.336 192.625 40.375 cv
191.664 39.414 190.359 38.875 189 38.875 cv
187.641 38.875 186.336 39.414 185.375 40.375 cv
184.414 41.336 183.875 42.641 183.875 44 cv
183.875 45.359 184.414 46.664 185.375 47.625 cv
186.336 48.586 187.641 49.125 189 49.125 cv
190.359 49.125 191.664 48.586 192.625 47.625 cv
193.586 46.664 194.125 45.359 194.125 44 cv
cp
0 0 0 0 cmyk
@
203.125 42 mo
203.125 40.641 202.586 39.336 201.625 38.375 cv
200.664 37.414 199.359 36.875 198 36.875 cv
196.641 36.875 195.336 37.414 194.375 38.375 cv
193.414 39.336 192.875 40.641 192.875 42 cv
192.875 43.359 193.414 44.664 194.375 45.625 cv
195.336 46.586 196.641 47.125 198 47.125 cv
199.359 47.125 200.664 46.586 201.625 45.625 cv
202.586 44.664 203.125 43.359 203.125 42 cv
.751003 .677302 .668788 .89218 cmyk
ef
203.125 42 mo
203.125 40.641 202.586 39.336 201.625 38.375 cv
200.664 37.414 199.359 36.875 198 36.875 cv
196.641 36.875 195.336 37.414 194.375 38.375 cv
193.414 39.336 192.875 40.641 192.875 42 cv
192.875 43.359 193.414 44.664 194.375 45.625 cv
195.336 46.586 196.641 47.125 198 47.125 cv
199.359 47.125 200.664 46.586 201.625 45.625 cv
202.586 44.664 203.125 43.359 203.125 42 cv
cp
0 0 0 0 cmyk
@
212.125 64 mo
212.125 62.641 211.586 61.336 210.625 60.375 cv
209.664 59.414 208.359 58.875 207 58.875 cv
205.641 58.875 204.336 59.414 203.375 60.375 cv
202.414 61.336 201.875 62.641 201.875 64 cv
201.875 65.359 202.414 66.664 203.375 67.625 cv
204.336 68.586 205.641 69.125 207 69.125 cv
208.359 69.125 209.664 68.586 210.625 67.625 cv
211.586 66.664 212.125 65.359 212.125 64 cv
.751003 .677302 .668788 .89218 cmyk
ef
212.125 64 mo
212.125 62.641 211.586 61.336 210.625 60.375 cv
209.664 59.414 208.359 58.875 207 58.875 cv
205.641 58.875 204.336 59.414 203.375 60.375 cv
202.414 61.336 201.875 62.641 201.875 64 cv
201.875 65.359 202.414 66.664 203.375 67.625 cv
204.336 68.586 205.641 69.125 207 69.125 cv
208.359 69.125 209.664 68.586 210.625 67.625 cv
211.586 66.664 212.125 65.359 212.125 64 cv
cp
0 0 0 0 cmyk
@
220.125 122 mo
220.125 120.641 219.586 119.336 218.625 118.375 cv
217.664 117.414 216.359 116.875 215 116.875 cv
213.641 116.875 212.336 117.414 211.375 118.375 cv
210.414 119.336 209.875 120.641 209.875 122 cv
209.875 123.359 210.414 124.664 211.375 125.625 cv
212.336 126.586 213.641 127.125 215 127.125 cv
216.359 127.125 217.664 126.586 218.625 125.625 cv
219.586 124.664 220.125 123.359 220.125 122 cv
.751003 .677302 .668788 .89218 cmyk
ef
220.125 122 mo
220.125 120.641 219.586 119.336 218.625 118.375 cv
217.664 117.414 216.359 116.875 215 116.875 cv
213.641 116.875 212.336 117.414 211.375 118.375 cv
210.414 119.336 209.875 120.641 209.875 122 cv
209.875 123.359 210.414 124.664 211.375 125.625 cv
212.336 126.586 213.641 127.125 215 127.125 cv
216.359 127.125 217.664 126.586 218.625 125.625 cv
219.586 124.664 220.125 123.359 220.125 122 cv
cp
0 0 0 0 cmyk
@
224.125 162 mo
224.125 160.641 223.586 159.336 222.625 158.375 cv
221.664 157.414 220.359 156.875 219 156.875 cv
217.641 156.875 216.336 157.414 215.375 158.375 cv
214.414 159.336 213.875 160.641 213.875 162 cv
213.875 163.359 214.414 164.664 215.375 165.625 cv
216.336 166.586 217.641 167.125 219 167.125 cv
220.359 167.125 221.664 166.586 222.625 165.625 cv
223.586 164.664 224.125 163.359 224.125 162 cv
.751003 .677302 .668788 .89218 cmyk
ef
224.125 162 mo
224.125 160.641 223.586 159.336 222.625 158.375 cv
221.664 157.414 220.359 156.875 219 156.875 cv
217.641 156.875 216.336 157.414 215.375 158.375 cv
214.414 159.336 213.875 160.641 213.875 162 cv
213.875 163.359 214.414 164.664 215.375 165.625 cv
216.336 166.586 217.641 167.125 219 167.125 cv
220.359 167.125 221.664 166.586 222.625 165.625 cv
223.586 164.664 224.125 163.359 224.125 162 cv
cp
0 0 0 0 cmyk
@
229.125 165 mo
229.125 163.641 228.586 162.336 227.625 161.375 cv
226.664 160.414 225.359 159.875 224 159.875 cv
222.641 159.875 221.336 160.414 220.375 161.375 cv
219.414 162.336 218.875 163.641 218.875 165 cv
218.875 166.359 219.414 167.664 220.375 168.625 cv
221.336 169.586 222.641 170.125 224 170.125 cv
225.359 170.125 226.664 169.586 227.625 168.625 cv
228.586 167.664 229.125 166.359 229.125 165 cv
.751003 .677302 .668788 .89218 cmyk
ef
229.125 165 mo
229.125 163.641 228.586 162.336 227.625 161.375 cv
226.664 160.414 225.359 159.875 224 159.875 cv
222.641 159.875 221.336 160.414 220.375 161.375 cv
219.414 162.336 218.875 163.641 218.875 165 cv
218.875 166.359 219.414 167.664 220.375 168.625 cv
221.336 169.586 222.641 170.125 224 170.125 cv
225.359 170.125 226.664 169.586 227.625 168.625 cv
228.586 167.664 229.125 166.359 229.125 165 cv
cp
0 0 0 0 cmyk
@
263.125 165 mo
263.125 163.641 262.586 162.336 261.625 161.375 cv
260.664 160.414 259.359 159.875 258 159.875 cv
256.641 159.875 255.336 160.414 254.375 161.375 cv
253.414 162.336 252.875 163.641 252.875 165 cv
252.875 166.359 253.414 167.664 254.375 168.625 cv
255.336 169.586 256.641 170.125 258 170.125 cv
259.359 170.125 260.664 169.586 261.625 168.625 cv
262.586 167.664 263.125 166.359 263.125 165 cv
.751003 .677302 .668788 .89218 cmyk
ef
263.125 165 mo
263.125 163.641 262.586 162.336 261.625 161.375 cv
260.664 160.414 259.359 159.875 258 159.875 cv
256.641 159.875 255.336 160.414 254.375 161.375 cv
253.414 162.336 252.875 163.641 252.875 165 cv
252.875 166.359 253.414 167.664 254.375 168.625 cv
255.336 169.586 256.641 170.125 258 170.125 cv
259.359 170.125 260.664 169.586 261.625 168.625 cv
262.586 167.664 263.125 166.359 263.125 165 cv
cp
0 0 0 0 cmyk
@
98.7109 149.684 mo
103.336 145.059 li
107.961 149.684 li
103.336 154.309 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
98.7109 149.684 mo
103.336 145.059 li
107.961 149.684 li
103.336 154.309 li
98.7109 149.684 li
cp
@
.75 lw
98.7109 149.684 mo
103.336 145.059 li
107.961 149.684 li
103.336 154.309 li
98.7109 149.684 li
cp
0 0 0 0 cmyk
@
116.695 139.688 mo
121.32 135.061 li
125.945 139.688 li
121.32 144.311 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
116.695 139.688 mo
121.32 135.061 li
125.945 139.688 li
121.32 144.311 li
116.695 139.688 li
cp
@
.75 lw
116.695 139.688 mo
121.32 135.061 li
125.945 139.688 li
121.32 144.311 li
116.695 139.688 li
cp
0 0 0 0 cmyk
@
137.391 121.582 mo
142.016 116.957 li
146.641 121.582 li
142.016 126.207 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
137.391 121.582 mo
142.016 116.957 li
146.641 121.582 li
142.016 126.207 li
137.391 121.582 li
cp
@
grestore
gsave
137 127 mo
148 127 li
148 116 li
137 116 li
cp
clp
.75 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
137.391 121.582 mo
142.016 116.957 li
146.641 121.582 li
142.016 126.207 li
137.391 121.582 li
cp
false sop
0 0 0 0 cmyk
@
grestore
150.34 105.977 mo
154.965 101.352 li
159.59 105.977 li
154.965 110.602 li
false sop
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
150.34 105.977 mo
154.965 101.352 li
159.59 105.977 li
154.965 110.602 li
150.34 105.977 li
cp
@
.75 lw
150.34 105.977 mo
154.965 101.352 li
159.59 105.977 li
154.965 110.602 li
150.34 105.977 li
cp
0 0 0 0 cmyk
@
163.699 87.2539 mo
168.324 82.6289 li
172.949 87.2539 li
168.324 91.8789 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
163.699 87.2539 mo
168.324 82.6289 li
172.949 87.2539 li
168.324 91.8789 li
163.699 87.2539 li
cp
@
.75 lw
163.699 87.2539 mo
168.324 82.6289 li
172.949 87.2539 li
168.324 91.8789 li
163.699 87.2539 li
cp
0 0 0 0 cmyk
@
174.742 72.543 mo
179.367 67.918 li
183.992 72.543 li
179.367 77.168 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
174.742 72.543 mo
179.367 67.918 li
183.992 72.543 li
179.367 77.168 li
174.742 72.543 li
cp
@
.75 lw
174.742 72.543 mo
179.367 67.918 li
183.992 72.543 li
179.367 77.168 li
174.742 72.543 li
cp
0 0 0 0 cmyk
@
184.189 65.1328 mo
188.811 60.5078 li
193.439 65.1328 li
188.811 69.7578 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
184.189 65.1328 mo
188.811 60.5078 li
193.439 65.1328 li
188.811 69.7578 li
184.189 65.1328 li
cp
@
.75 lw
184.189 65.1328 mo
188.811 60.5078 li
193.439 65.1328 li
188.811 69.7578 li
184.189 65.1328 li
cp
0 0 0 0 cmyk
@
193.266 69.9409 mo
197.891 65.3159 li
202.516 69.9409 li
197.891 74.5659 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
193.266 69.9409 mo
197.891 65.3159 li
202.516 69.9409 li
197.891 74.5659 li
193.266 69.9409 li
cp
@
.75 lw
193.266 69.9409 mo
197.891 65.3159 li
202.516 69.9409 li
197.891 74.5659 li
193.266 69.9409 li
cp
0 0 0 0 cmyk
@
202.379 99.6411 mo
207.004 95.0161 li
211.629 99.6411 li
207.004 104.266 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
202.379 99.6411 mo
207.004 95.0161 li
211.629 99.6411 li
207.004 104.266 li
202.379 99.6411 li
cp
@
gsave
202 105 mo
213.001 105 li
213.001 94 li
202 94 li
cp
clp
.75 lw
202.379 99.6411 mo
207.004 95.0161 li
211.629 99.6411 li
207.004 104.266 li
202.379 99.6411 li
cp
0 0 0 0 cmyk
@
grestore
gsave
0 0 mo
310 0 li
310 245 li
0 245 li
cp
clp
210.605 161.762 mo
215.23 157.137 li
219.855 161.762 li
215.23 166.387 li
f
210.605 161.762 mo
215.23 157.137 li
219.855 161.762 li
215.23 166.387 li
210.605 161.762 li
cp
@
.75 lw
210.605 161.762 mo
215.23 157.137 li
219.855 161.762 li
215.23 166.387 li
210.605 161.762 li
cp
0 0 0 0 cmyk
@
214.316 164.727 mo
218.941 160.102 li
223.566 164.727 li
218.941 169.352 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
214.316 164.727 mo
218.941 160.102 li
223.566 164.727 li
218.941 169.352 li
214.316 164.727 li
cp
@
.75 lw
214.316 164.727 mo
218.941 160.102 li
223.566 164.727 li
218.941 169.352 li
214.316 164.727 li
cp
0 0 0 0 cmyk
@
219.234 165.039 mo
223.859 160.414 li
228.484 165.039 li
223.859 169.664 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
219.234 165.039 mo
223.859 160.414 li
228.484 165.039 li
223.859 169.664 li
219.234 165.039 li
cp
@
.75 lw
219.234 165.039 mo
223.859 160.414 li
228.484 165.039 li
223.859 169.664 li
219.234 165.039 li
cp
0 0 0 0 cmyk
@
252.996 165.246 mo
257.621 160.621 li
262.246 165.246 li
257.621 169.871 li
.751003 .677302 .668788 .89218 cmyk
f
.03 lw
252.996 165.246 mo
257.621 160.621 li
262.246 165.246 li
257.621 169.871 li
252.996 165.246 li
cp
@
.75 lw
252.996 165.246 mo
257.621 160.621 li
262.246 165.246 li
257.621 169.871 li
252.996 165.246 li
cp
0 0 0 0 cmyk
@
2 lw
276.105 178.311 mo
32.8955 178.311 li
32.8955 27.9995 li
.751003 .677302 .668788 .89218 cmyk
@
.1 lw
0 lc
32.895 178.311 mo
32.895 175.883 li
@
grestore
%ADOBeginSubsetFont: DMSAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /DMSAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210325d73000000cc000000606376
7420a11cd7eb0000012c000006546670676dcc79599a000007800000066e
676c7966316172f00000886c0000188268656164e6bd72d600000df00000
0036686865611233162600000e2800000024686d747874c0fd5400000e4c
000035746c6f636101426604000043c0000035786d61787012b805df0000
7938000000206e616d653530fcaa00007958000003547072657025d64dbf
00007cac00000bbe67646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200004
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
4043555441403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b01060482046b0106048590a21211b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b8ff
f060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b
1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012
435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c
5a58381b2121592d2c4b5258b00425b0042549b00425b00425496120b000
5458212043b0005558b00325b00325b8ffc038b8ffc038591bb040545820
43b0005458b00225b8ffc038591b2043b0005458b00325b00325b8ffc038
b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
0000000535c3f20a36db5f0f3cf5081b080000000000a2e3272a00000000
d1f8cb77faaffd671000080c00000009000100010000000000010000073e
fe4e00431000faaffa7a1000000100000000000000000000000000000d5d
06000100000000000239000002390000023900b002d7005e047300150473
0049071d0077055600580187005a02aa007c02aa007c031d004004ac0072
023900aa02aa0041023900ba0239000004730055047300df0473003c0473
00560473001a047300550473004d047300610473005304730055023900b9
023900aa04ac007004ac007204ac00700473005a081f006f0556fffd0556
009605c7006605c7009e055600a204e300a80639006d05c700a4023900bf
04000037055600960473009606aa009805c7009c063900630556009e0639
005805c700a10556005c04e3003005c700a105560009078d001905560009
0556000604e300290239008b023900000239002703c100360473ffe102aa
00590473004a0473008604000050047300460473004b0239001304730042
0473008701c7008801c7ffa20400008801c7008306aa0087047300870473
0044047300870473004802aa00850400003f02390024047300830400001a
05c700060400000f040000210400002802ac0039021400bc02ac002f04ac
00570556fffd0556fffd05c70068055600a205c7009c0639006305c700a1
0473004a0473004a0473004a0473004a0473004a0473004a040000500473
004b0473004b0473004b0473004b023900bd023900230239ffe502390009
047300870473004404730044047300440473004404730044047300830473
0083047300830473008304730049033300800473006b0473001b04730051
02cd006d044c000104e3009905e5000305e50003080000e102aa00de02aa
003d0464004e080000010639005305b4009a0464004e0464004d0464004d
0473fffd049c00a003f4003805b4007a069600a1046400000231000002f6
002f02ec002d0625007f071d004404e3008104e3009e02aa00e804ac0072
046400540473002e0464003304e5001a047300860473008c080000ef0556
fffd0556fffd0639006308000081078d00520473fffc0800000002aa0053
02aa004701c7008001c7006c0464004e03f4002f04000021055600060156
fe390473ffe402aa005c02aa005c040000170400001704730049023900b9
01c7006c02aa0047080000250556fffd055600a20556fffd055600a20556
00a20239008d0239ffe00239000402390015063900630639006306390063
05c700a105c700a105c700a1023900c602aa001902aa000602aa001d02aa
002e02aa00e502aa00a202aa006b02aa003a02aa004b02aa002804730000
01c700030556005c0400003f04e3002904000028021400bc05c7fffd0473
004905560006040000210556009e0473008704ac007204ac00a102aa006b
02aa001902aa002106ac006b06ac006b06ac0021047300000639006d0473
0042023900b10556005c0400003f05c700660400005005c7006604000050
04730046046bffe102aa00ee0556fffd0473004a0556fffd0473004a05c7
009e04eb004705c7fffd055600a20473004b055600a20473004b04730096
01c7004204730096025500880473009a02ac008305c7009c0473008705c7
009c04730087063900630473004405c700a102aa008505c700a102aa003c
0556005c0400003f04e300300239002404e300300300002305c700a10473
008305c700a10473008304e300290400002804e3002904000028046800a4
063900600662005504a00048047400480391006204f000440329002e0530
0048046bffe1040000b002eb005208c000330800004f040000990800004f
040000990800004f040000980400009807d5016a05c0009e04ab007204d5
009d04ac007104d5022204d5010505abffe9050001c905ab027e05abffe9
05ab027e05abffe905ab027e05abffe905abffe905abffe905abffe905ab
ffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe9
05ab027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab
01c005ab01c005abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905ab02d605ab006605abffea05d5ffff04d50092
0800000007eb013007eb012007eb013007eb012004d500b204d5008004d5
002a082b0198086b01b807550010060000f40600006f0440003a05400037
04c0003f04150040040000250600005505e100bf038d008904d5ffd90180
008002d50086071500610296000f04d5009202d6008302d6008304d500b2
02d600700556fffd0473004a05c700660400005005c70066040000500556
00a20473004b055600a20473004b055600a20473004b0639006d04730042
0639006d047300420639006d0473004205c700a40473008705c7001f0473
00060239ffce0239ffce0239ffe40239ffe40239fff60239fff50239004b
01c700190400003701c7ffa20556009604000088040000860473009601c7
fffa05c7009c0473008705c900a50473008b063900630473004406390063
0473004405c700a102aa006b0556005c0400003f04e300300239000c05c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
078d001905c70006055600060400002101c700890556fffd0473004a0800
0001071d00440639005304e30081023900b9078d001905c70006078d0019
05c70006078d001905c70006055600060400002101c7008a02aaffe10473
001b04cd005a06ac006b06ac002206ac002206ac004a02aa00e202aa006b
02aa00de02aaffea0557ffff0646ffa706b4ffa80312ffa80632ffa706d8
ffa70605ffa701c7ff780556fffd055600960558fffe055600a204e30029
05c700a4023900bf055600960558000b06aa009805c7009c0533006d0639
006305c700a40556009e04f2009404e30030055600060556000906af007f
05fb0061023900040556000604a00048039100620473008b01c7006b0460
0088049a008c04000019038700480473008b0473005c01c7008904000086
04000018049c00a00400001a0395005c04730044048d008303db00560460
00880433001105b4007a063f005701c7ffc9046000880473004804600088
063f0057055700a206eb0032045500a105c000640556005c023900bf0239
0004040000370875000d081500a406d5003104a900a10515000a05c000a0
0556fffd054000a705560096045500a1056b0000055600a20763000704d5
004e05c000a105c000a104a900a10540001206aa009805c700a406390063
05c000a00556009e05c7006604e300300515000a061500520556000905eb
009f05550057075500a1078000a106550000071500a8054000a505c00055
081500a405c7001a0473004a0495005b0440008802eb008804ab00000473
004b055afffb03ab003204780087047800870380008604ab00180580008c
046b00880473004404550088047300870400005003aa0026040000210695
004b0400000f0495008a042b0045066b008d0695008d0500002805c0008b
042b008404150030060000890455001f0473004b0473000002eb00890415
004b0400003f01c700880239000901c7ffa2074000130680008304730000
0380008604000021046b008803e900a1034a008808000041089500a00585
002d000001010000001e0000003100000031000001010000007e0000007e
0000008c0000008c000001010000001000000101000001210310007d0000
008c023300d20000030b0000ff04023900b9048100690456003203310019
0411002d04d1009601f9009b030f005f04ca009b04b8008c01f9009b0413
002803b0005003b4003c04ca009b04cf005001f9009b02d2003c0498005a
043c00190488006e045f007303b1001903d4000a0466009604130028058e
00640524002803f2009b03f2009b03f2009b01e3005a0356005a0686009b
01f9ffac041300280413002803b4ff5703b4ff570448002d058e0064058e
0064058e0064058e00640481006904810069048100690456003203310019
0411002d04d10096024b0000034a000004b8008c024b00000413002803b0
005003b4003c04cf005002d2003c0498005a0488006e045f007303d4000a
0466009604130028058e00640524002801f9009b0456003203b00050045f
0073049b003c0000ffdc0000ff250000ffdc0000fe51028d00ab028d00a0
02da0043034d007901a8ffba000000460000004600000046000000460000
00480000004600000046000000460435017c0435012e043500b704350081
0435012c043500be043500af043500810435009a043500db04350085028d
00c1043500b3060001000600010002420036060001000435009e04350098
043500cb0600010006000100060001000600010006000100000000460600
010006000100060001000600010006000100060001000600010006000100
051bffba06000100060001000600010005b5003a05b5003a01f4ffba01f4
ffba060001000600010006000100060001000481003604350036043dffba
043dffba03e9004a03e9004a067f0014077600140327ffba041effba067f
0014077600140327ffba041effba051b003204b500240300fff706000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010000000030
0000004600000046000000400000004606000100060001000000ffdc0000
fe510000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ff160000ff160000ffdc0000ff160000ffdc0000ff200000ffdc0473
004a08000000060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010006000100060001000600010006000100028d
007f028d005d0600010004ee0015034d007901a8000e01d6ffdc01a80056
01d60010037500320375003201a8002d01d60013051b003204b5002401f4
ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba01f4ffba
024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba02b3
005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0692003e0692003e043fffba043f
ffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5ffba
06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7
ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a039a0036
0435ffba0327ffba064f0027064f00270224ffba021affba04a7004604a7
00460224ffba021affba04cf002d04cf002d0327ffba0327ffba040d0047
040d004701a8ffba01a8ffba02b4002302b400230327ffba0327ffba0435
00450435004501f4ffba01f4ffba024200360300fff7039affba0327ffba
0375003203750032051b003204b50024051b003204b5002401f4ffba01f4
ffba045a004004ce0049045a002604ce0039045a005304ce004a045a0053
04ce004a0600010006000100000000460000004606000100060001000600
010000000046000000460600010006000100000000480000004606000100
060001000600010000000046000000460000004600000046000000400000
003006000100000000460000004606000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100028d00ca028d00c7028d
00c606000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000100ffba0800ffba1000ffba06dc0063053f004406d5
00a1055b00830000fddc0000fc2f0000fca60000fe540000fcd70000fd73
0000fe290000fe0d0000fd110000fc670000fd9d0000fbf50000fc720000
fed50000fed50000ff02041b00a006ac006b06ac00190000feb60000fd73
0000fe080000fca60000fe530000fd110000fbc80000faf40000faaf0000
fc720000fbaa0000fb6a0000fcf10000fc7d0000fbdd0000fcc10000fb98
0000fdea0000fe840000fdc20000fcf10000fd5f0000fe760000febc0000
fceb0000fd6c0000fd580000fc900000fd150000fc2c0000fc130000fc12
0000fb960000fb9601c700880556fffd0473004a0556fffd0473004a0556
fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a055600a20473004b055600a2
0473004b055600a20473004b055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b0239006301c7001f
023900ba01c7007c06390063047300440639006304730044063900630473
004406390063047300440639006304730044063900630473004406390063
0473004406dc0063053f004406dc0063053f004406dc0063053f004406dc
0063053f004406dc0063053f004405c700a10473008305c700a104730083
06d500a1055b008306d500a1055b008306d500a1055b008306d500a1055b
008306d500a1055b00830556000604000021055600060400002105560006
040000210556fffd0473004a0239ffe201c7ffb0063900630473004405c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
05c700a1047300830000fefe0000fefe0000fefe0000fefe0455fffd02eb
000c07630007055afffb04a900a10380008604a900a10380008605c700a4
046b00880473fffd040000140473fffd04000014055600090400000f0555
0057042b0045055500a10473008706050063047300550639006004730044
05b5003a01f4ffba0224ffba021affba04a7004601f4009e01f4001001f4
001b01f4001001f4006b01f4fff90227ffce0000000f0000fff502aa00a4
02aa00a40000000e00000056000000560000ffcf01a8000f01d6ffbf01a8
fff501d6ffcd01a8001d01d6fff501a8009301d600130375003203750032
0375003203750032051b003204b5002405b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba0481003604350036043dffba043dffba048100360435
0036043dffba043dffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba02b3003202b3003202b3005f02b3005f
02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3005f02b3
005f02b3005f02b3005f02b3003802b3003802b3004902b3004903e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0692003e0692003e043fffba043f
ffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba045a
002a039a00360435ffba0327ffba064f0027064f0027064f00270224ffba
021affba064f0027064f00270224ffba021affba064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba04a7004604a7004604a7004604a70046093e0032093e
00320740ffba0740ffba067f0014077600140327ffba041effba04cf002d
04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba04cf
002d04cf002d0327ffba0327ffba067f0014077600140327ffba041effba
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba040d0047040d004701a8ffba01a8ffba040d0047040d004701a8
ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba043500450435004501f4ffba01f4ffba043500450435
00450435004504350045043500450435004501f4ffba01f4ffba04350045
043500450481003604350036043dffba043dffba024200360300fff7031a
001a031a001a031a001a0375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
0032037500320375003203750032051bffba04b5ffba051b003204b50024
01f4ffba01f4ffba0375003203750032051b003204b5002401f4ffba01f4
ffba051b003204b50024067f0045067f0045067f0045067f004501a80028
0000fe290000fea20000ff300000ff1d0000ff120000ff920000fe7e08fc
003208ad00320000ffb50000ffb60000feed0000ff640000fe7e0000ff9f
018d000002f6fffd0000fe820000ff1004cd00320000ff580000ff580000
ff640692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba045a002a039a00360435ffba0327ffba034d007902b400230242
003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b101f4006d
067f00140776001401f9009b0000fed902bc000003f2009b045afff504ce
fff5045a005304ce004a045a005304ce004a045a005304ce004a045a0053
04ce004a045a005304ce004a045a005304ce004a04350071043500ad045a
000f04ce000f0473001406110014054000a7047300860540000a0473000a
05c7005105c700660400005005c7fffd067a00140540004a047300460474
00480556006e04d5005304e3ffc40639006d04fe000f070c008701c70083
0239001f055600960400008801c7001504000018072000a405c7ffb80473
008b0639006006f200630557004406090014047300860556009e0556006b
0400004f04f20094030b00440239002404e300140239002404e3003005fb
006105c700a1062e00100400002104e300290400002804e3002904e30031
045c0044045c003f0473003c0473005503ab003203e50024047300870214
00bc034e00bc04ac0072023900b00aaa009e09c7009e08640046087f0096
06aa0096039c008309c7009c078e009c062b0087047300550556fffd0473
004a0000fefe0556fffd0473004a08000001071d00440639006d0473001a
0639006d0473004205560096040000880639006304730044063900630473
004404e30029045c004c01c7ffa20aaa009e09c7009e086400460639006d
04730042084600a404f2009e05c7009c047300870556fffd0473004a0556
fffd0473004a055600a20473004b055600a20473004b0239ff8a0239ff64
023900040239fff60639006304730044063900630473004405c700a102aa
ffcc05c700a102aa006805c700a10473007605c700a1047300830556005c
0400003f04e3003002390024045c0051037e001305c700a40473008705a6
00a404d6005e0486005e04e30029040000280556fffd0473004a055600a2
0473004b06390063047300440000fefd0639006304730044063900630473
004406390063047300440556000604000021047300570473004804730086
04730086040000130400005004730046047300460473005505e9005503ab
004903ab0032050d0032040f00440239ffb9047300420473004204780050
0402001904ef00190473008b047300870473008701c7001901c7005702d9
0044029e0000026e001401c700830493008306aa008406aa008406aa0087
0473ffa60473008b046c00870473004406530044063f00570466004402aa
ffe402aaffe402aaffe402aa008502aa008502aa008502aaffe40455008a
0455008a0400003f01c7ffa20214ffb901c7ff7202cb00000239000f0239
002404730019048c0054046000880400001a05c700060400001804280019
0400002804540028045c004c045c00790400002404000050040000240400
00500639006304400088040f004904780050046b0088032e000004000008
033b008804730048040000240400005007b7004607400046080b004605b3
0024036f002405c00024061c0013054a0083050f008303e2001e04380063
03110064031100640146ffce01eb006401eb000001eb000002ea006403d9
0000029100000187005a02d7005e01c7008001c7006c01c7008a02aa00fb
02aa00fb02ca003202ca003204ac007004ac007004ac006504ac006502aa
012102aa00de02aa005902aa012102aa001d02aa005902aa00de023900b6
023900b602aa00fb02aa00fb02aa00a602aa00a602aa00a602aa001d02aa
ffe202aafffb029400000142006402b8003202a0000002ca003203100096
0310009603100096031000960310009602aa006202aa006202aa002802aa
001d02aa0047045700960457009604570096045700960457004304570043
045700430457004304570043031000430457002f0457002f0457002f0457
002f0457002f0310002f0457002504570025045700250457002504570025
0310002f0457001a0457001a0457001a0457001a0457001a0310001a0457
004204570042045700420457004204570042031000420457009604570096
045700960457009604570042045700420457004204570042045700420310
00420457002f0457002f0457002f0457002f0457002f0310002f0457002f
0457002f0457002f0457002f0457002f0310002f04570026045700260457
002604570026045700260310002604570042045700420457004204570042
045700420310004204570096045700960457009604570096045700420457
004204570042045700420457004203100042045700260457002604570026
045700260457002603100026045700230457002304570023045700230457
0023031000230457002f0457002f0457002f0457002f0457002f0310002f
0457004b0457004b0457004b0457004b0457004b0310004b045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457001a0457001a0457001a0457001a0457001a0310001a0457
002404570024045700240457002404570024031000240457002f0457002f
0457002f0457002f0457002f0310002f0457004e0457004e0457004e0457
004e0457004e0310004e045700960457009604570096045700960000fec1
0000fec60000fdac0000fed80000ff920000fee90000ff4c0000fea00000
fec40000ffce0000ff660000fea00000fed80000fed80000ff970000ff98
0000ff990000fff40000ff420000ff420000ff440000ff5f0000fe870000
ffec0000ffa60000ff510000ff510000ff510000fec90000ff1c00000000
0000fee90000ff4c0000ff930000ff2a0000ff560000ffce0000fe870000
febb0000fec40000fec40000fed80000fed80000feb30000fec90000fdad
0000fec80000feb30000fec90000fdad0000fe160000fee60000ffa60000
fe870000ff440000feba0000ff230000ff9a0000fdac0000fe8800000000
0000feb00000ff980000fe930000ffa60000fe870000fe1c0000ff660000
ff440000feb00000feb00000feb00000ff030000ff520000fd1f0000ff53
0000ff530000ff530000feb50000feb50000ffc30000feae0000fedc0000
fec70000fec80000fedc0000fe1e0000ff420000ff510000feb70000feb0
02aa00de02aa005902aa00fa049a007004600000062e001407aa0000062e
0014047b004c063f005704cf0044063900630473004405c7007004000050
04e300a8033b008804ff0000043c0032060d000a049d0042072000a406aa
0084056500630473008b056400a40400000a0556006b0556006b04e00005
04c5001905e5005f046e004403b600140347002804cf00440495005b0400
005001c7ffa2063900600389004d03890050055600a205c000a10473004b
047800870ab4006d04fe00100639001404e70014079900bf05b500880558
000104000006072e00bf0590008806a10078057b007a086d00bf06f00088
04d5006603ab001f065f0039058200480639006004730044066d0009050c
001a066d0009050c001a08980063072c004406aa002004e6001c0987006d
06d000500000fe370ab4006d04fe001005c7006604000050040700140000
fea60000febc0000ff980000ff980000fc2b0000fc4c05c000a104780087
05400004042b00140556009e04730087055d00a40464008804d5004e03ab
003204a900040380000005ef002904490028070900a4052f0088091800a0
06f600880606003e042b002305c700660400005004e3003003aa00260767
00310587002605550057042b004506e4000a0554000a06e4000a0554000a
023900bf07630007055afffb055700a1046800860540001204ab001805c7
00a4046b008805c700a4046b008805550057042b004506aa00980580008c
02aa002e0556fffd0473004a0556fffd0473004a08000001071d00440556
00a20473004b060500630473005507630007055afffb04d5004e03ab0032
04d5004e045c004c05c000a10478008705c000a104780087063900630473
0044063900600473004405c0004a0415002b0515000a040000210515000a
040000210515000a0400002105550057042b0045071500a805c0008b0540
004a0473004607bf004a0703004607a6006606860053054d006604130053
07c3001207470018084600a4070700880639006d0478005005f900300553
00260000ff430000fec90000ff770000ffb00000ff470000ff560000ff74
0000fed70000feac000000000000ff520000ff56000000000000feac0000
fd9a000000000000ff6a0000ff7c0000ff690000ff560000feac0000ff7f
0000ff560000fdef0000ff430000ff690000ff7c000000000000fdae0000
ff8c000001020000fefe0000fefe0000fedf0000fedf0000ff580000ff20
0000fefe0556fffd0473004a055600960473008605560096047300860556
00960473008605c700660400005005c7009e0473004605c7009e04730046
05c7009e0473004605c7009e0473004605c7009e04730046055600a20473
004b055600a20473004b055600a20473004b055600a20473004b055600a2
0473004b04e300a8023900130639006d0473004205c700a40473008705c7
00a40473008705c700a40473008705c700930473006805c700a404730087
0239ffdf01c7ff9202390020023900060556009604000088055600960400
008805560096040000880473009601c7007e0473009601c7ffb904730096
01c7ffa50473009601c7ffa306aa009806aa008706aa009806aa008706aa
009806aa008705c7009c0473008705c7009c0473008705c7009c04730087
05c7009c0473008706390063047300440639006304730044063900630473
004406390063047300440556009e047300870556009e0473008705c700a1
02aa008505c700a102aa008505c700a102aa005e05c700a102aa00260556
005c0400003f0556005c0400003f0556005c0400003f0556005c0400003f
0556005c0400003f04e300300239002404e300300239002404e300300239
ffff04e300300239000e05c700a10473008305c700a10473008305c700a1
0473008305c700a10473008305c700a104730083055600090400001a0556
00090400001a078d001905c70006078d001905c70006055600090400000f
055600090400000f055600060400002104e300290400002804e300290400
002804e3002904000028047300870239000305c70006040000210473004a
01c7008904a0004804a0004804a0004804a0004804a0004804a0004804a0
004804a000480556fffd0556fffd06820013068200130682001306820013
068200560682005603910062039100620391006203910062039100620391
0062061e0000061e0000076c0000076c0000076c0000076c00000473008b
0473008b0473008b0473008b0473008b0473008b0473008b0473008b068f
0000068f0000081f0000081f0000081f0000081f0000081ffff3081ffff3
01c7008101c7008101c7ff9b01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7
ffa20301000003010000049100000491000004910000049100000491fff3
0491fff3047300440473004404730044047300440473004404730044069d
0000069d0000082d0000082d000007c9000007c900000460008804600088
0460008804600088046000880460008804600088046000880682000007ae
00000812000007ae0006063f0057063f0057063f0057063f0057063f0057
063f0057063f0057063f0057065f0000065f000007ef000007ef0000078b
0000078b0000078bffff078bffff04a0004804a000480391006203910062
0473008b0473008b01c7ffe601c700680473004404730044046000880460
0088063f0057063f005704a0004804a0004804a0004804a0004804a00048
04a0004804a0004804a000480556fffd0556fffd06820013068200130682
00130682001306820056068200560473008b0473008b0473008b0473008b
0473008b0473008b0473008b0473008b068f0000068f0000081f0000081f
0000081f0000081f0000081ffff3081ffff3063f0057063f0057063f0057
063f0057063f0057063f0057063f0057063f0057065f0000065f000007ef
000007ef0000078b0000078b0000078bffff078bffff04a0004804a00048
04a0004804a0004804a0004804a0004804a000480556fffd0556fffd0556
fffd0556fffd0556fffd02aa00e502aa00fd02aa00e502aa000602aa0006
0473008b0473008b0473008b0473008b0473008b068200000682000006f3
000006f3000005c700a402aa001302aa001302aa000601c7ffbb01c7ffab
01c7ffca01c7ffca01c7ff9301c7ff930239001a0239fff5036500000365
000002aa001302aa001302aa000604600088046000880460008804600088
048d0083048d00830460008804600088055600060556000606e600000718
0000061e000002aaffea02aaffea02aa0059063f0057063f0057063f0057
063f0057063f005707650000069d000007270000065f000005fb006102aa
00de02aa00e50473000d05c7006605c7006606aa008705c70024095000a1
078d00190556001f04e30030080000290400003004c100660000ff530000
ff530000ff530000ff5301c7001901c7ffa2042b00050556001105740046
02cbffa3057a008702f0ffc8057f000a057f000a02aa008402aa008402aa
00c902aa00c902aa00a002aa005902aaffaf02aa003a02aa0006023900b9
02aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa003a0000
ff730000ffa50000fed80000ff230000ff720000ff720000fee70000ffa5
0000ff530000ff530000ff530556009e0473008703f8001905fb0019071d
00440440001904000050046900870469001903eb008703ab003201c70088
0361004104000088033600100580008c04780087047300440400001304de
004404de004404de000d078d005003a800440473004404730044042b0084
0455001f0455001f03aa00260460008804c6004405de004404c600440400
001a05c700060400002803ab0032036b003f04db001f02eb00880400001a
04550088042b008405b4007a04ab001803a00000054f0000035100320351
ffd103980032034800320348003203f80032036e0032015600690284002d
0366003202d000320415003203710032036f003204180032030f00320359
0032039c003203760031036f003204fb000002fa003202fa003203040032
04cc0032030500640305003202f9003202f90032028c0032028c00320304
00320142006402b6006404950064030f00640305003202d5003203050032
030500320306006401c20032030f00640342003204950064029200000320
00000315006402920000030600320385003202bf00000142006401eb0064
030f0064029200000315006402920000030900320385003202bf000005ed
00460a660046061300460689ffba0541ffba01e9003c045a00110000ff0d
0000ff350000fece0000feb70000fec90000ffcf0000ff4f0000ff9e0000
feca02b3005f02b3005f03e9004a03e9004a039affba0327ffba039affba
0327ffba05ad0069053d002d05fd009604dc005004e0003c05f6009b053f
00280650002804ac00720000fe3b0000fe660000fe660473fffc02aa0053
02d5ffce01a8ffba01a8ffba01a8ffba01a8ffba0658001509c500470400
000008000000040000000800000002ab0000020000000155000004730000
02390000019a000000ab00000000000005e5000305c7006606aa00980580
008c0744008307180046071800480556fffd05c70066040000140473000a
04e300300400004f0400002804a5001d000001020000ff420000febf0000
ff3a0000ff53048d000a05c7005105c7006605c70051045500a102eb0088
0000ff430000ff040000ffac02d200960000ff37021affba0250001e0000
ff3a0000ff5b0000ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a
05b5003a01f4ff9601f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba0481003604350036043dffba
043dffba0481003604350036043dffba043dffba02b3003202b3003202b3
005f02b3005f03e9004a03e9004a0692003e0692003e043fffba043fffba
045a002a039a00360435ffba0327ffba045a002a039a00360435ffba0327
ffba045a002a039a00360435ffba0327ffba064f0027064f00270224ffba
021affba064f0027064f00270224ffba021affba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba067f001407760014
0327ffba041effba02b4002302b400230327ffba0327ffba02b4002302b4
00230327ffba0327ffba043500450435004501f4ffba01f4ffba04350045
0435004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba040d
0047040d004701a8ffba01a8ffba03e9004a03e9004a03e9004a03e9004a
0692003e0692003e043fffba043fffba0473ff93047300460239ffbf06aa
ffd50473ffb70473ff9102aaffa402aaffa40400ffff0239ffb904000028
04730089030b0064047400480649002401c7001901c700190473001e0460
001e048c000a04730086047300460239001305b400420400008801c7fffc
06aa00870473008b0473008702aafffb0400003f0318ffa20400001a0400
000f040000280473004a04730048047300460473004b03ab004903ab0032
0534005501c700880400001301c7ffa204730083045c004c0304006402d5
003202c9003302fc0032028c003201d5003201d500000304003203110064
01420019014200640142006401420019022a000001420064014200090233
00640493006404930064030fffc9030f0064030e00640305003203000032
02b800320142ffca01c20032030f001d031a00320306006402d400640292
000002de003202de003202de003202f4003202ea00320000febc0000febc
0000ff730000fea9023900b902fa003202f900320305003202a0000002f9
00320639006d0556fffd0473000f05c7006602aa004104a0004804a00048
04a0004804a0004804a0004804a0004804a0004804a0004801c7ff9b01c7
ffab01c7ff9b01c7ffab01c7ff9b01c7ffbb01c7ff9b01c7ffbb04600088
0460008804600088046000880460008804600088046000880460008801c7
ffab01c7ffab01c7ffbb01c7ffbb04600088046000880460008804600088
045a005304ce004a03a000130556001105c700290558000b055600a20473
004b0400003301c7ffa205e600630473004805c7000002aa000f05560006
0400002104000013040000500400001301c700830455fffd02eb00010556
00090400000f055600090400000f04d5005303ab00490540001204ab0018
0000fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff720000
ff730000fee7078b000a03eb004c040000130473000a01c700150473fff4
0556001105c700a1047300190239ff8b05c700a404730087055600960400
008804e30029040000280400003b049e00a403670088053000480000ff53
0000ffbc0000fefe0000fefe0000fea40000fea401c7008805c900a505c7
009c05c900a50000fecd0000ff480000fec90000fece0000fec50000fed0
0000fed10000feee0000fed60000fedc0000fdd90639005804730048078d
001905c70006059f00a40000feb905dc006304c60009084c001906ba0006
023900b9038000720187005a0187005a0400009904000099023900b00239
00b0023900b002aa001904e30030047300500473000f0473001c065b0087
064a004c000000000000002a0000002a0000002a0000002a0000002a0000
002a0000002a0000002a0000002a0000002a0000002a0000002a0000002a
0000002a0000002a0000002a0000002a0000006600000066000002220000
02fe000005280000052800000688000006880000085e0000085e00000af2
00000af200000af200000af200000af200000af200000af200000af20000
0af200000af200000af200000af200000af200000af200000af200000af2
00000af200000af200000af200000af200000af200000af200000c9c0000
0c9c00000c9c00000c9c00000c9c00000c9c00000c9c00000c9c00000c9c
00000c9c00000c9c00000c9c00000c9c00000c9c00000c9c00000c9c0000
0c9c00000c9c00000c9c00000f6e00000f6e00000f6e00000f6e00000f6e
00000f6e00000f6e00000f6e00000f6e00000f6e00000f6e00000f6e0000
0f6e00000f6e00001130000012f4000012f4000012f4000012f400001418
000014180000141800001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000018820000188200001882000018820000
188200001882000018820000188200001882000018820000188200001882
000018820000188200001882000100000d5d00f2003c009d000700020010
002f0056000004ac041d000500020000000e00ae0000000300000000006a
000000000003000000070062006a0001000000000000003500cc00010000
00000003000e01010001000000000004000e010f0001000000000006000e
011d00010000000000070031012b0003000104090000006a015c00030001
04090001001c01c60003000104090002000e01e20003000104090003001c
01f00003000104090004001c020c0003000104090006001c022800030001
040900070062024400a90020003200300031003400200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e004100720069
0061006c00200069007300200061002000740072006100640065006d0061
0072006b0020006f006600200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
002ea9203230313420546865204d6f6e6f7479706520436f72706f726174
696f6e2e20416c6c205269676874732052657365727665642e495949514e
4e2b417269616c4d54495949514e4e2b417269616c4d54495949514e4e2b
417269616c4d54417269616c20697320612074726164656d61726b206f66
20546865204d6f6e6f7479706520436f72706f726174696f6e2e00a90020
003200300031003400200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e0049005900490051004e004e002b00410072
00690061006c004d00540052006500670075006c00610072004900590049
0051004e004e002b0041007200690061006c004d00540049005900490051
004e004e002b0041007200690061006c004d00540049005900490051004e
004e002b0041007200690061006c004d00540041007200690061006c0020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e002e00>
<b900540328b326181fd0bc032900e0032900020329b22b1d1fb90327031d
b23b1f40b80323b31215320f412d03200001002f0320000100200320006f
032000af032000bf03200004005f031e00010010031e007f031e0080031e
00af031e00bf031e00d0031e00060000031e0010031e0020031e006f031e
009f031e00e0031e0006031d031cb2201f1041270319007f03190002000f
031700ef031700ff03170003001f0317002f0317004f0317005f0317008f
0317009f03170006000f0317005f0317006f0317007f031700bf031700f0
0317000600400317b2923340b80317b28b3340b80317b36a6c3240b80317
b2613340b80317b35c5d3240b80317b357593240b80317b34d513240b803
17b344493240b80317b23a3340b80317b331343240b80317b32e423240b8
0317b3272c3240b80317b312253280b80317b30a0d32c04116031600d003
16000200700316000102c4000f0101001f00a0031500b003150002030600
0f0101001f00400312b32426329fbf03040001030203010064001fffc003
01b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002edb30e11
329f414a02e200af02e200bf02e2000302e202e202e102e1007f02e00001
001002e0003f02e0009f02e000bf02e000cf02e000ef02e0000602e002e0
02df02df02de02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf
02dd00ef02dd000702dd02dd001002dc0001000002dc0001001002dc003f
02dc000202dc02dc001002db000102db02db000f02da000102da02daffc0
02d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2
171b32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b1f40bb03
22003e00330322b225311fb80318b23c691fb802e3b3202b1fa0413002d4
00b002d40002000002d4001002d4002002d4005002d4006002d4007002d4
0006006002d6007002d6008002d6009002d600a002d600b002d600060000
02d6001002d6002002ca002002cc002002d6003002d6004002d6005002d6
000802d0b2202b1fb802cfb226421f411602ce02c70017001f02cd02c800
17001f02cc02c60017001f02cb02c50017001f02c902c5001e001f02ca02
c6b21e1f00410b02c6000002c7001002c6001002c7002f02c5000502c1b3
24121fff411102bf0001001f02bf002f02bf003f02bf004f02bf005f02bf
008f02bf000602bf0222b2641f12410b02bb00ca0800001f02b200e90800
001f02a600a20800406a1f4026434932402043493240263a3d3240203a3d
329f209f26024026969932402096993240268e923240208e92324026848c
324020848c3240267a813240207a813240266c763240206c76324026646a
324020646a3240265a5f3240205a5f3240264f543240204f5432b8029eb7
24271f374f6b0120410f0277003002770040027700500277000402770277
027700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180bc018052
0180a201806501807e01808101803c01805e01802b01801c01801e018040
0180bb0138000100800140b40180400180bb013800010080013940180180
ca0180ad018073018026018025018024018020013740b80221b2493340b8
0221b2453340b80221b341423240b80221b33d3e320f410f0221003f0221
007f0221000300bf022100cf022100ff0221000300400221b320223240b8
0221b3191e3240b80222b32a3f3240b80221b32e3a326f414802c3007f02
c3008f02c300df02c30004002f02c3006002c300cf02c30003000f02c300
3f02c3005f02c300c002c300ef02c300ff02c3000600df02220001008f02
220001000f0222002f0222003f0222005f0222007f022200ef0222000600
bf022100ef02210002006f0221007f022100af02210003002f0221003f02
21004f0221000302c302c30222022202210221401d101c102b1048038f1c
010f1e014f1eff1e023700161600000012110811b8010db6f70df8f70d00
094109028e028f001d001f0290028f001d001f028fb2f91d1fb80198b226
bb1f41150197001e0401001f013900260125001f013800730401001f0135
001c0801001f0134001c02ab001f0132b21c561fb8010fb2262c1fba010e
001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51c
b802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b80201b61f
b91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b
1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f481c891f44
1c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301c
bb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b21f5537b8
0168402c07960758074f07360732072c0721071f071d071b071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a
515ab005234201b0124b004b5442b0382b4bb807ff52b0372b4bb007505b
58b101018e59b0382bb00288b801005458b801ffb101018e851bb0124358
b900010111858d1bb900010128858d5959001816763f183f123e11394644
3e113946443e113946443e113946443e11394660443e11394660442b2b2b
2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa
1d59b0324b5358b0ff1d594bb09353205c58b901f201f04544b901f101f0
45445958b9033e01f2455258b901f2033e4459594bb8015653205c58b900
2001f14544b9002601f145445958b9081e0020455258b90020081e445959
4bb8019a53205c58b9002501f24544b9002401f245445958b90909002545
5258b9002509094459594bb8040153205c58b173244544b1242445445958
b917200073455258b9007317204459594bb8040153205c58b1ca254544b1
252545445958b9168000ca455258b900ca16804459594bb03e53205c58b1
1c1c4544b11e1c45445958b9011a001c455258b9001c011a4459594bb056
53205c58b11c1c4544b12f1c45445958b90189001c455258b9001c018944
59594bb8030153205c58b11c1c4544b11c1c45445958b90de0001c455258
b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c45
6523456023456560234560b08b766818b080622020b163594565234520b0
03266062636820b003266165b059236544b063234420b13b5c4565234520
b003266062636820b003266165b05c236544b03b2344b1005c455458b15c
406544b23b403b4523614459b347503437456523456023456560234560b0
89766818b080622020b134504565234520b003266062636820b003266165
b050236544b034234420b147374565234520b003266062636820b0032661
65b037236544b0472344b10037455458b137406544b24740474523614459
004b5342014b5058b108004259435c58b108004259b3020b0a124358601b
2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342
b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f23
42b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b
7475737500184569444569444569447373737374757374752b2b2b2b7475
2b2b2b2b2b73737373737373737373737373737373737373737373737373
2b2b2b45b0406144737400004bb02a534bb03f515a58b1070745b0406044
59004bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a
515a58b1030345b040604459004bb02e534bb03c515a58b1090945b8ffc0
6044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b43
5c58b9008002bbb301401e017400735903b01e4b5402b0124b545ab01243
5c5a58ba009f02220001007359002b7473012b01732b2b2b2b2b2b2b2b73
7373732b2b2b2b2b002b2b2b2b2b2b004569447345694473456944737475
456944734569444569444569447374456944456944732b2b2b2b2b732b00
2b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b737475737475
2b2b2b742b2b000000>
[6275 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 102 19 <00020055ffe7041105c00010001d0155b10202435458400a1a1e0405141e
0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c0f0f0255
00160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3fed31301b
b10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f065509b8ffe6
b40d0d065509b8ffee40190b0b0655091100100d0d065500100c0c065500
100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301bb4062019101c
b8fff0b202200bbeffe00016ffe00012ffe0000fffe0406204068702880b
880fc90e0509070b180245134c154a19431b54135c155c19521b6b076b0b
63136c156b19601b79027706760b7a0f870698079610c918da02d606d60b
db0f1a1a1e0405141e0d0d17730940212334300901000910090209901f11
7300b8ffc0400e212334200040000200901ec78b182b10f65d2bed10f65d
712bed003fed3fed3130015d71005d003838383838013838385959131012
363332161612151002062322272613101633323611102623220706556bd3
a076b274426ad3a1d47991b9a97c7ca9a97e7c4a5d02d30104013dac5fb3
feffdafefefec3ad98b7019dfe97eff00168016aee698600>DMSAAA+ArialMT AddT42Char 
2 546 20 <000100df000002fb05c0000a00af402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0400a21233430000120
000100b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d
0d025500b8fff040190f0f065500100c0c065500100d0d0655001a0c0540
0d0f3405b8ffc0400e212334300501200540050205190bba013c01850018
2b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>DMSAAA+ArialMT AddT42Char 
2 766 21 <0001003c0000040705c0001e01c7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40363b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021b101c101d101e1006befff00007ffe000
08fff00009fff0401a1e0a10080606ca1c1a141c1c1a081c1a030102081a
1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb400f0102
0c0a7317d30000014021233401bb0281002000100138400c11b53f025f02
6f027f020402ba0224001f018fb18b182b10f65df4ed10f62b3c10f4ed00
3f3cfd3c3fedfd5de4111217390111121739870e2e2b0e7d10c401111239
313000383838380138383838005d015d7259592515212637363637363635
34262322060727363633321615140606070606070407fc37021725a39aef
a8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c07ec4e5666b93
9c8a13cfd9eaad58aabca4886131>DMSAAA+ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>DMSAAA+ArialMT AddT42Char 
DMSAAA+ArialMT /CharStrings get begin
/zero 19 def
/one 20 def
/two 21 def
end
DMSAAA+ArialMT /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
pop
end
%ADOEndSubsetFont
/ZIUVOL+ArialMT /DMSAAA+ArialMT findfont ct_VMDictPut
/ZIUVOL+ArialMT*1 
[48{/.notdef}rp /zero /one /two 205{/.notdef}rp]
ZIUVOL+ArialMT nf
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
11.3936 205.314 mo
(10)
[11.676 0 ]xsh
%ADOBeginSubsetFont: VSTBAA+MathematicaSans Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /VSTBAA+MathematicaSans def
/FontInfo 7 dict dup begin
/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
def
/FontBBox {-157 -250 1126 952} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604583 def
/StdHW [67] def
/StdVW [88] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/hyphen <1C60D8A8C9B8391507657B8D1429650EAD682B1E1FA8FF445B393CF
432> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZIUVOM+MathematicaSans /VSTBAA+MathematicaSans findfont ct_VMDictPut
/ZIUVOM+MathematicaSans*1 
[45{/.notdef}rp /hyphen 210{/.notdef}rp]
ZIUVOM+MathematicaSans nf
ZIUVOM+MathematicaSans*1 [14.9092 0 0 -14.9092 0 0 ]msf
35.3936 194.514 mo
(-)sh
ZIUVOL+ArialMT*1 [14.9092 0 0 -14.9092 0 0 ]msf
44.3838 194.514 mo
(2)sh
.1 lw
0 lc
113.965 178.311 mo
113.965 175.883 li
@
%ADOBeginSubsetFont: DMSAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DMSAAA+ArialMT gcheck setglobal} if
2 42 17 <000100ba0000018700cd000300254018023c000a023c5f006f007f00af00
04a0000100a004a198182b10f65d5ded003fed313033353315bacdcdcd00
>DMSAAA+ArialMT AddT42Char 
DMSAAA+ArialMT /CharStrings get begin
/period 17 def
end
DMSAAA+ArialMT /Encoding get
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZIUVOL+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two 205{/.notdef}rp]
ZIUVOL+ArialMT nf
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
98.9644 201.314 mo
(0.1)
[11.676 5.838 0 ]xsh
195.035 178.311 mo
195.035 175.883 li
@
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
189.035 201.314 mo
(1)sh
276.105 178.311 mo
276.105 175.883 li
@
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
264.106 201.314 mo
(10)
[11.676 0 ]xsh
gsave
0 0 mo
310 0 li
310 245 li
0 245 li
cp
clp
57.2969 178.311 mo
57.2969 177.098 li
@
71.5742 178.311 mo
71.5742 177.098 li
@
81.7031 178.311 mo
81.7031 177.098 li
@
89.5591 178.311 mo
89.5591 177.098 li
@
95.98 178.311 mo
95.98 177.098 li
@
101.406 178.311 mo
101.406 177.098 li
@
106.109 178.311 mo
106.109 177.098 li
@
110.254 178.311 mo
110.254 177.098 li
@
138.371 178.311 mo
138.371 177.098 li
@
152.645 178.311 mo
152.645 177.098 li
@
162.773 178.311 mo
162.773 177.098 li
@
170.629 178.311 mo
170.629 177.098 li
@
177.051 178.311 mo
177.051 177.098 li
@
182.477 178.311 mo
182.477 177.098 li
@
187.18 178.311 mo
187.18 177.098 li
@
191.324 178.311 mo
191.324 177.098 li
@
219.441 178.311 mo
219.441 177.098 li
@
233.715 178.311 mo
233.715 177.098 li
@
243.844 178.311 mo
243.844 177.098 li
@
251.703 178.311 mo
251.703 177.098 li
@
258.121 178.311 mo
258.121 177.098 li
@
263.547 178.311 mo
263.547 177.098 li
@
268.25 178.311 mo
268.25 177.098 li
@
272.398 178.311 mo
272.398 177.098 li
@
2 lw
32.895 178.311 mo
34.629 178.311 li
@
32.895 172.051 mo
34.629 172.051 li
@
32.895 165.789 mo
35.789 165.789 li
@
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
-.1064 173.788 mo
(0.0)
[11.676 5.838 0 ]xsh
32.895 159.523 mo
34.629 159.523 li
@
32.895 153.262 mo
34.629 153.262 li
@
32.895 147 mo
34.629 147 li
@
32.895 140.734 mo
35.789 140.734 li
@
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
-.1064 148.735 mo
(0.2)
[11.676 5.838 0 ]xsh
32.895 134.473 mo
34.629 134.473 li
@
32.895 128.211 mo
34.629 128.211 li
@
32.895 121.945 mo
34.629 121.945 li
@
32.895 115.684 mo
35.789 115.684 li
@
%ADOBeginSubsetFont: DMSAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DMSAAA+ArialMT gcheck setglobal} if
2 1320 23 <0002001a0000041005ba000a000d0126403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6b40d0d
02550ab8ffeeb40d0d06550ab80137400d07402223340780213507900f02
b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ffe4b60d
0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b2b3c10
e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c40f0f0f
313001435c58b9000dffdeb212390db8ffd4400b333903222d3903041d1d
3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c221c39
0c402d392b2b2b2b2b5921112135013311331523110311010296fd84029d
93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>DMSAAA+ArialMT AddT42Char 
DMSAAA+ArialMT /CharStrings get begin
/four 23 def
end
DMSAAA+ArialMT /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZIUVOL+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
203{/.notdef}rp]
ZIUVOL+ArialMT nf
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
-.1064 123.683 mo
(0.4)
[11.676 5.838 0 ]xsh
32.895 109.422 mo
34.629 109.422 li
@
32.895 103.156 mo
34.629 103.156 li
@
32.895 96.895 mo
34.629 96.895 li
@
32.895 90.6289 mo
35.789 90.6289 li
@
%ADOBeginSubsetFont: DMSAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DMSAAA+ArialMT gcheck setglobal} if
2 1672 25 <0002004dffe7041505c0001d002a014fb10202435458401f0f011f015f01
03011b281e400d010d0d14051e1b05221e140d0a1e01002510b8fff44019
0d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f2b2b2bcd
2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b19014407
4015441944205a1254206b03640764086a1264207408751c8508861cd608
d4161107200d0d065527b8ffe0b40d0d065523b8ffe0400b0d0d06552120
0d0d065507b8ffe0b42720232021b8ffe04011281e400d500d020d0d141b
01d35f000100b802684009051e1b05221e140d01b80138401200b5257310
40212334301001001010100210b8fff0b70c0c065510902c0aba0138001e
013940163f175f176f177f170417160c0c065517160d0d065517b80224b3
2bc78b182b10f62b2b5deded10f62b5d712bedf4ed003fed3fedfd5de411
12392f5ded313001383838382b2b2b2b015d005d59010726272623220706
060736363332121514060623220011103736333216011416163332363534
2623220603fbb3182c496b564155620241bc67b4fd77d084e1fee49d89e8
adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed
7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>DMSAAA+ArialMT AddT42Char 
DMSAAA+ArialMT /CharStrings get begin
/six 25 def
end
DMSAAA+ArialMT /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZIUVOL+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six 201{/.notdef}rp]
ZIUVOL+ArialMT nf
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
-.1064 98.6309 mo
(0.6)
[11.676 5.838 0 ]xsh
32.895 84.3672 mo
34.629 84.3672 li
@
32.895 78.105 mo
34.629 78.105 li
@
32.895 71.8398 mo
34.629 71.8398 li
@
32.895 65.5781 mo
35.789 65.5781 li
@
%ADOBeginSubsetFont: DMSAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DMSAAA+ArialMT gcheck setglobal} if
2 2142 27 <00030053ffe7041905c00017002300300200b10202435458b40c001b1e2e
b8ffc04017131302552e2e12211e0605281e120d1e090c0c0c025509b8ff
f4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b02550fb8ffe8
b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503b8fff440
190d0d02550324150c0b0b0255150c0c0c0255150c0d0d0255152f2b2b2b
cd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed393931301b
b10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0fb8ffe4b4
0f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8fffc4022
0d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12211e0605
281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b2bcd2f2b
2bcd31301b4037351601291649164926e60ce930050930017d007d017c04
7408710b720c750d7a178b008a018c048608810b840c860d8d17cc11c613
1222b8ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0401e2920
0c001e18000c1b1e2ea02e012e12211e0605281e120d1e73bf090109b802
6740102b730f40202334300f01000f100f020fb80191b6321873b0030103
b80267b2247315b8ffc0400e2123342015401502159031c78b182b10f65d
2bedf45ded10f45d712bedf45ded003fed3fed12395d2fed393901111239
393130013838383838383838015d72710071595901262635343633321615
140607161615140023220035343613141633323635342623220603141616
333236353426232206016a706ce6bfc0ea6b6d878dfef6d9d9fef6916286
6b6885896667883a49905381a8ad827fa7031b29986aa0dadfa06697292c
c488bcff000101c08fc101546884835f638784fcff4d904fa68082aaa800
>DMSAAA+ArialMT AddT42Char 
DMSAAA+ArialMT /CharStrings get begin
/eight 27 def
end
DMSAAA+ArialMT /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZIUVOL+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}rp]
ZIUVOL+ArialMT nf
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
-.1064 73.5786 mo
(0.8)
[11.676 5.838 0 ]xsh
32.895 59.3159 mo
34.629 59.3159 li
@
32.895 53.0508 mo
34.629 53.0508 li
@
32.895 46.7891 mo
34.629 46.7891 li
@
32.895 40.5269 mo
35.789 40.5269 li
@
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
-.1064 48.5264 mo
(1.0)
[11.676 5.838 0 ]xsh
32.895 34.2622 mo
34.629 34.2622 li
@
32.895 28 mo
34.629 28 li
@
grestore
%ADOBeginSubsetFont: DMSAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DMSAAA+ArialMT gcheck setglobal} if
2 3950 82 <00020044ffe80427043e000d0019016bb615180d0d065513b8ffe8b40d0d
06550fb8ffe840730d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14241b400d0d02551b400b0b
025507b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b
0b065507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c0655
07b8ffc04013242534300701000710072007030731df1b011bb8ffc04049
1e2334301b011b0e24000c0e0f025500120d0d0255000c0c0c0255001c0b
0b0255000e0b0b0655000e0d0d0655000c1010065500160c0c0655004024
25341f003f000200311a3437182b10f65d2b2b2b2b2b2b2b2b2bed10712b
5df65d5d2b2b2b2b2b2b2b2b2b2bed003fed3fed313001715d0071435c58
4009530553096205620904015d59002b2b2b2b1310373633320015140606
23220013141633323635342623220644a489c5db01167beb8bdffeedb9b2
8786b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca
>DMSAAA+ArialMT AddT42Char 
2 4400 83 <00020087fe690421043e0012001e0162408e0c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a0420400b
0b025520400d0d02550ab8ffe6400b0f0f02550a180d0d02550ab8fffab4
0c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f06550ab8ffe840230c0c
06550a74011333023312250000c001019001a001b001f001041f013f014f
010301b8fffc401d0e0e025501100d0d025501100c0c025501100b0b0255
010c0b0b065501b8fff6b41010065501b8fffc40160f0f0655010c0c0c06
5501120d0d065501191f473718012b4e10f42b2b2b2b2b2b2b2b2b5d7172
3c4d10fdf4e410fd2b2b2b2b2b2b2b2b5d71ed003f3fed3f3fed11391239
3130005d015d717200711311331536363332161615140206232226271103
141633323635342623220687a43a926888d06a75df7b5a8f2e11a67678ab
a77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbca
d700>DMSAAA+ArialMT AddT42Char 
2 4852 87 <00010024fff2022a0599001700d8b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e0255
07b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8ff
f0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136
b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd3c10e4f43c003f
ed3f3cfd3c1139123911333310c93130015d2b2b25170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>DMSAAA+ArialMT AddT42Char 
2 5144 90 <00010006000005b704260012041db10202435458b90012fff440110d0d02
5507060d0d025500060d0d02550ab8ffd4b40c0d025504b8ffe8400b0c0d
025511200c0d02550ab8ffc0b40e10025504b8ffc0402f0e10025511400e
100255040a110301000c06070601060f0a000a0d0c060c0c02550c110102
040a04110a0c0c025511b8fff8b40d0d0255112f2b2bcdcd10d6cd10d42b
cd003f3f3f3f3f111217393130002b2b2b2b2b2b012b2b2b1b40160f1401
2a04290a024a115b118e110311200d0d06550ab8ffe0b40d0d065504b8ff
e0b40d0d065511b8fff040091f2134101c1d273409b8fff040b71f243404
060c0913061b09191205040004060b090b0e08121000130314071c081b0b
1d0e240025072a082b0e340035073a083b0e4403470640074d084b0b430f
47114a125b0f52126b076408671279067a077408b906ba0fb612f506fb09
280b112800280d270e280f27122f1438003712770886089803970ca701a8
02a80ba60cb500b606ba0ec804d606d909e804e80fe712f406fa091c0b06
0d0d06550c060d0d065510060d0d06550e060d0d06550f060d0d065512b1
0602435458401b0a0e0f0412001108070825070f250e122500000e07030d
010c250db8ffd640370b0b06550d0225012a0b0b0655010d011413060a0b
11260a2b115404520a5c116c117c118a110a110a040300010f0a000a0c06
07060106003f3f3f3f3f111217395d01111239392f2bf42f2bf411121739
10e410e410e41112391112391112391b40140305050206070705090a0a08
0b0c0c0a1011110fb8ff4bb305001220b8ff4940660a0f0e20c311070820
071112122b0507140505070e0a0c0c250d0e140d0d0e08110f0f2b0a0814
0a0a080005020225010014010100000201071204080f110c0e0d0a110a04
03120d0c0c0808070702020106120f0f0e0e000a14f6100d01600d700d80
0d030db801a7400a204f0a016f0a7f0a020ab8025540094f11016f117f11
0211b80255400b1005016005700580050305b801a7b501f613f666182b4e
10f4194df45d5d18fd5d71fd5d711a19fd5d5d18e6003f3c103c103c3f3c
103c103c103c103c1217390111123939123939113939123939874d2e2b87
7dc4872e182b877dc4872e182b877dc4872e182b877dc42b2b2b870e10c4
070e103c070e103c870e10c4870e10c44bb01f5358b40d200c2002bcffe0
0001ffe0000effd0b400300f2012b8ffe0013838383838383838594bb034
5358b90008ffd0b10730013838594bb021534bb033515a58b90008ffe0b1
0720013838594bb012534bb01e515a58b9000effd0b60f200d200c2008b8
ffd0b2073012b8ffe0b2003802baffe00001ffe001383838383838383838
38594bb012534bb017515a58b90011ffe0b30a2004200038383859593130
01435c58b9000effd4b61239002c123900b8ffd4b113392b2b2b592b2b2b
2b2b5d71722b2b2b002b2b2b715d015d5921013313173637133313173713
330123032703014bfebbbaa93f0433a9b99f353db6affeb4bba929d70426
fd9be411ca026efd98cbcd0266fbda027cb5fccf>DMSAAA+ArialMT AddT42Char 
DMSAAA+ArialMT /CharStrings get begin
/o 82 def
/p 83 def
/t 87 def
/w 90 def
end
DMSAAA+ArialMT /Encoding get
dup 111 /o put
dup 112 /p put
dup 116 /t put
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZIUVOL+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 54{/.notdef}rp /o /p 3{/.notdef}rp 
/t 2{/.notdef}rp /w 136{/.notdef}rp]
ZIUVOL+ArialMT nf
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
122.5 235.314 mo
(w)sh
%ADOBeginSubsetFont: VSTBAA+MathematicaSans AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZIUVOM+MathematicaSans dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B8151C27268C28135E46A906DDC9504EC2C635F21A9AA1
DC0B003BE7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZIUVOM+MathematicaSans /Encoding get
dup 47 /slash put
pop
%ADOEndSubsetFont
/ZIUVOM+MathematicaSans*1 
[45{/.notdef}rp /hyphen /.notdef /slash 208{/.notdef}rp]
ZIUVOM+MathematicaSans nf
ZIUVOM+MathematicaSans*1 [21 0 0 -21 0 0 ]msf
138.25 235.314 mo
(/)sh
%ADOBeginSubsetFont: EUBBAA+Arial-ItalicMT Initial
ct_T42Dict begin
-0.516 -0.324 1.355 0.996
 256 array 0 1 255 {1 index exch /.notdef put} for  /EUBBAA+Arial-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32efe77db1000000cc000000606376
74203de628370000012c000005606670676d54bf6d360000068c000005ce
676c79667dd72dc9000067080000035468656164e35a0e7900000c5c0000
0036686865610e470d6700000c9400000024686d74787ed3282b00000cb8
000027f06c6f636100205688000034a8000027f46d6178700d2803cc0000
5c9c000000206e616d65219af8b500005cbc000003a17072657048530f70
00006060000006a667646972000000000000000000000000000203880190
00050008059a0533001e011b059a0533005a03d1006602120805020b0604
020202090204e0000aff000078430000000100000000544d432000010020
fffc05d3fe570133073e01b2400001bfdff70000042605ba000000200004
05ba001905ba001905a6001a042600180000ffe70000ffe80000ffe7fe69
ffee05ba0019fe6fffe202e2000000b5000000b5000000000000000000bc
00bf008c00b300a600a600b10010010400640079008b008b00c100ea008a
00a2009101b40073007a00a400a200bb01bd0270005a00800017007000c3
00300103ffd000ac007d010d0006001200c900cd00560091ff8f0113000b
00190043007200b903c803d7ffee0146016e0002001b0044005200b603ee
00d80104023d05180573ff2d0005000900c600cd024cffe7001100150037
0049004e005c00a600a700b500c500db01280543ffdf0021004000530070
0079008e00a300ca018f0265027502a403c80555ff9affd7ffee00050008
002600460069007000730077009a00c100ef010a011301c101e50318049c
fef2fef9ffa4000000270034004100450075008000c400cb00d900e500f8
01550166022b0254037004050467ff16ffb40002001d0032004a004a004d
00550060007c007f008c009d00b102a3038cfec4fef7000100030003002d
00370037003a0056005a00a400cd00da0111011901250127014801530169
01a001fb02070239028102a402f7030503280328033603a303b503dd03df
03f10448047804e6060bff28ff4bff68ff78ff9fffbfffe10012001f0028
004c005a005c005e00610070007700810083008800b1009c009c009d009f
00a500b600b800b900ba00d300df00e100f200f7010e0132013b013c0166
016c017801ae01b501b701cf01d2025d026102a202cd0323035a03a303a4
040004440450047304d2fe00fe38fe8cfeb1feceff0effb2ffc7ffecfffd
0005001f002100250026002d00580065008100850091009900a500ab00af
00b000b000ba00db00dc00e900f80109010901100114011701240129012d
012f013601500151015a0167017401790182018e01900199019c01b001b3
01b701be01c501da01e801f001f201fb02000200020b020f021f0222022c
022d022e024e02670287029002ac02b502bc02bc02d002d402d802db02e5
02f102f9031103140314032203260348034a035c036f03780379037e03ab
03b503cb03e004040405040f0428042c048404a504af04cf04eb04f9050b
058e0593059805e505e506000610063d06500668069506b806d907030751
0766077e077f078207b60800082308ac00b200bf00b100af000000000000
000000000000025c00a100d301be00de01a6031402ab015002a70196010e
0318006b039b01d1054b0089023c02b0014d021603f301760176001503a9
01f400f400b6020402d8012b04a701a000bc01bd028c026b0278040f0157
04a904fd017404d2040302e400a602ee00000000061404a7000002760000
016d013e00000267006d009e021400cb02a40085007100c2009e06090290
00b9008f00260248003501490091009902ef00eb008e0011013f006a0079
00fd01a3057402a1017a03e8020c005601fd02df013b0574006606100081
01b3024e03cb01e400cd02bc0132014b01680239016200fd00e601a201e6
0255004d028300a3046705d401dd012b014e05680070000004e003490366
021302bb0000000000000000000000000000000000af00b4000300cd004c
03c8005c0192007200cd022b0049026f009d03bd01e900b4017c04670368
0099027802040183028102ac00b30348040b004200b403b400be01a803d6
012b00af0478016e0193ff45fd5d00f506a604ae03b10536041cffcafedc
01a501d0ffba02f10037ffca0355fe67019c04190055007c00e50072006d
000b00ab012b009c00db01a60008012b00250056008e00a5001500100109
00cb00460017004c005e01f200b80083001101360128004e0222006b0241
072006140000072700aaff370037006e002901da04a8007500ba40415440
3f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c4523466020b02660b004262348482d2c452346236120b02661b0
04262348482d2c45234660b0206120b04660b004262348482d2c45234623
61b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d
2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d442359
20b0ed51582320b04d44235920b0042651582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b1021745
3ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4
182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae4
1b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae4
1b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01182f
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
3623701020b802364520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46
2320468a608a61b8ff8062232010238ab902a502a58a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b202020243604259b12401885458b2022002436042004b01
4b5258b2020802436042591bb940000080885458b202040243604259b940
00008063b80100885458b202080243604259b94000010063b80200885458
b2021002436042595959592d000000010000000535c371c75d465f0f3cf5
0819080000000000a372c2bf00000000d1f8cb96fbddfd670adf07fb0002
0009000100010000000000010000073efe4e00430aaafbddfa520adf0021
000700000000000000000000000009fc0600010000000000023900000239
00000239007302d701150473005f04730069071d00c7055600a101870104
02aa00ad02aaff93031d00ec04ac00b80239003102aa005f023900760239
ff98047300910473012f04730078047300700473005d0473008e047300ab
047300f8047300990473008a023900750239003104ac00b804ac00b804ac
00b804730104081f006f0556ffd70556005905c700ba05c7005b0556005c
04e3005d063900c705c7005602390075040000440556005b0473005206aa
005a05c70064063900bb05560058063900bd05c700600556009004e300ff
05c700c6055600fe078d01000556ffbf055600ef04e300320239000d0239
00ae0239ff8803c100900473ff7e02aa012a0473005a0473004404000073
0473006c0473006a0239005d047300350473004401c7003d01c7ff080400
004601c7003606aa004304730044047300640473ffeb0473006902aa0044
0400004e0239007304730080040000a205c7009f0400fffd040000000400
002802ac006b021400bc02acff5404ac00a40556ffd70556ffd705c700ba
0556005c05c70064063900bb05c700c60473005a0473005a0473005a0473
005a0473005a0473005a040000730473006a0473006a0473006a0473006a
0239007d0239007d0239007d0239007d0473004404730064047300640473
0064047300640473006404730080047300800473008004730080047300ba
033301110473009a047300400473003e02cd006d044c008e04e3004a05e5
005305e500530800011802aa015a02aa00ed0464007c0800ffad063900ae
05b4009a0464007c0464007c0464007c0473004b049c000c03f4003805b4
007a069600f1046400000231000002f600a702ec008f062500bb071d0057
04e3009904e300ac02aa007604ac00b8046400540473002e0464007c04e5
001a047300a104730053080001260556ffd70556ffd7063900bb080000a4
078d00810473fffc0800000002aa00d802aa00d601c7010801c701000464
008003f4007804000000055600ef0156fde80473005102aa006102aa0021
0400006f0400006f0473000b023900b901c7fff102aaffd8080000880556
ffd70556005c0556ffd70556005c0556005c023900750239007502390075
02390075063900bb063900bb063900bb05c700c605c700c605c700c60239
007d02aa00cd02aa00c002aa00c902aa00db02aa018e02aa014802aa004d
02aa00b002aa004002aa01080473001801c70026055600900400004e04e3
003204000028021400bc05c7005b04730064055600ef0400000005560058
0473ffeb04ac00b804ac010502aa011702aa009802aa00a906ac007b06ac
00ab06ac00a90473ffe8063900c70473003502390075055600900400004e
05c700ba0400007305c700ba040000730473006c046b00b502aa01360556
ffd70473005a0556ffd70473005a05c7005b0500007005c7005b0556005c
0473006a0556005c0473006a0473005201c7003604730052024000380473
00520333003605c700640473004405c7006404730044063900bb04730064
05c7006002aa004405c7006002aa0044055600900400004e04e300ff0239
001b04e300ff02d5006d05c700c60473008005c700c60473008004e30032
0400002804e300320400002804900057063900bb06b200b4049000660472
00620384004504d3006402fe00b00538006f046bff7e0400007302eb0077
08c000190800004f040000990800004f040000990800004f040000980400
009807d5016a05c000ee04ac00b804d5009d04ac007104d5022204d50105
05abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e05ab
ffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905ab02d6
05ab006605abffea05d5ffff04d500920800000007eb013007eb012007eb
013007eb012004d500b204d5008004d5002a082b0198086b01b807550010
060000f40600006f0440003a0540003704c0003f04150040040000250600
005505de0075038d003b04eb00650180010402d50115071500b802960019
04d5009202d6008302d6008304d500b202d600700556ffd70473005a05c7
00ba0400007305c700ba040000730556005c0473006a0556005c0473006a
0556005c0473006a063900c704730035063900c704730035063900c70473
003505c700560473004405c70056047300440239007501c7003d02390075
01c7003d0239007501c7003d0239ffdc01c7ff960400004401c7ff080556
005b04000046040000460473005201c7ff6e05c700640473004405c90062
04730049063900bb04730064063900bb0473006405c7006002aaffc70556
00900400004e04e300ec0239001805c700c60473008005c700c604730080
05c700c60473008005c700c604730080078d010005c7009f055600ef0400
000001c700360556ffd70473005a0800ffad071d0057063900ae04e30099
02390128078d010005c7009f078d010005c7009f078d010005c7009f0556
00ef0400000001c7013302aa00990473004004cd005a06ac007b06ac0094
06ac009306ac006302aa002602aaffe002aa017b02aa00610556ffd4064f
006306c50068031c0062065a005706ec00600633001b01c7ffee0556ffd7
05560059055effec0556005c04e3003205c70056023900750556005b0556
ffec06aa005a05c7006405300008063900bb05cc00570556005804cc002d
04e300ff055600ef0556ffbf06a500fd0616000702390075055600ef0490
0066038400450471004501c7003d046600960492ffe90400009e03b50064
047100450457008201c7003d0400003c03f0ffcd0462ffe8040000a20393
0073047300640495ffe403e4006f04660096045eff6d05d2009c063b0064
01c7003d046600960473006404660096063b00640556005c06be00e7045a
005705a900bb055600900239007502390075040000440887ffea07dc0057
06c100e504b70057051d00e705ca00570556ffd70535005705560059045a
005705a2ff7f0556005c0756ffb704e9006305b9005705b9005704b70057
057cffeb06aa005a05c70056063900bb05cc00570556005805c700ba04e3
00ff051d00e7065c00a40556ffbf05d10057056300db075d005707620057
067100e70717005705350057058d005a082e00570574ffca0473005a0480
0076042d006403f2004e046c00640473006a0581ffc503b8001f04730080
0473008003c7003f0483ffd8057c003f0467003f047300640467003f0473
ffeb0400007306aa00430400000006af005f0400fffd0493007d04240097
06a4007906cf007904f8007905e3003f0435003f03ef00350604003f0446
ffe80473006a047300450306003f03f700610400004e01c7003d01c7003d
01c7ff080748ffd8069f003f0473004503c7003f040000000473007d03f0
005702b7003f0800005108aa005b055c00ac0000003f0000ff930000ffa2
0000ffa2000000760000fff30000fff30000fffd0000fffd000001c00000
ff850000012e00000053031000f10000014a02330082000003ca0000ffc3
0239006d0481001d0456ffe60331ffcd041100a104d1005601f9004f030f
00b304ca004f04b8008b01f900bc041300a903b0000703b400b004ca004f
04cf002301f9fff802d2fff00498006c043cffd30488009c045f003303b1
00af03d4fff304660003041300a9058e00a20524ffe103f2004f03f200bc
03f200bc01e3009e0356009e0686004f01f9009b041300a90413007003b4
001703b400170448ffe1058e00a2058e00a2058e00a2058e00a20481001d
0481001d0481001d0456ffe60331ffcd041100a104d10056024b002d034a
003904b8008b024b004e041300a903b0000703b400b004cf002302d2fff0
0498006c0488009a045f003303d4fff304660003041300a9058e00a20524
ffe101f9004f0456ffe603b00007045f0033049b00370000ffdc0000ff25
0000ffdc0000fe510000ffdc0000fe510000ff160000ff160000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ffdc0000ff16
0000ffdc0000ff200000ffdc047300a408000000067e00bb04d600640659
00c6051200800000fef40000fd410000fdb70000ff580000fdec0000fe3b
0000ff2e0000ff380000fe090000fd760000feb30000fd0e0000fd660000
ffec0000ffc40000fe44041b005606ac007b06ac007b0000ff6a0000fdb8
0000feca0000fdc80000ff2d0000fdc70000fced0000fc0e0000fc0e0000
fd140000fc910000fc7c0000fc920000fc460000fc000000fc460000fbdd
0000fef40000ff500000fe7e0000fc6a0000fc950000fdf70000fe330000
fc990000fcf90000fcef0000fc9f0000fc8b0000fbde0000fd2c0000fd4b
0000fc780000fc6801c7003d0556ffd70473005a0556ffd70473005a0556
ffd70473005a0556ffd70473005a0556ffd70473005a0556ffd70473005a
0556ffd70473005a0556ffd70473005a0556ffd70473005a0556ffd70473
005a0556ffd70473005a0556ffd70473005a0556005c0473006a0556005c
0473006a0556005c0473006a0556005c0473006a0556005c0473006a0556
005c0473006a0556005c0473006a0556005c0473006a0239007501c7003d
0239003801c7ffe8063900bb04730064063900bb04730064063900bb0473
0064063900bb04730064063900bb04730064063900bb04730064063900bb
04730064067e00bb04d60064067e00bb04d60064067e00bb04d60064067e
00bb04d60064067e00bb04d6006405c700c60473008005c700c604730080
065900c605120080065900c605120080065900c605120080065900c60512
0080065900c605120080055600ef04000000055600ef04000000055600ef
040000000556ffd70473005a0239007501c7003d063900bb0473006405c7
00c60473008005c700c60473008005c700c60473008005c700c604730080
05c700c60473008000000030000000300000003000000030045a003e0306
003c0756ffb70581ffc504b7005703c7003f04b7005703c7003f05c70056
0467003f047300ea040000a2047300870400fff40556ffbf0400fffd0563
00c6042400810563007504730044063900c104730076063900bb04730064
01f900a10000000002bc000003f2008c0473004405d8008c053500570473
0044053500570473004405c700a005c700ba0400007305c7005b0646008c
0535003b0473006c047200000556004404e9006604e3ff2a063900c703f9
00890709004401c70036023900620556005b0400004601c7003603f0ffcd
06c5007005c7ff3004730044063900bb06f200bb0557006405d8008c0473
ffeb05560058055600820400005704cc002d02aa00c80239ffe404e300a0
0239007304e300ff061600bf05c700c605bd00d10400000004e300320400
002804e3ffba04e30033040000110400fffa04730078041500490381000a
0400006b0473ffeb021400bc034e00bc04ac0072023900730aaa005b09c7
005b0873006c08730052063a0052038e003609c70064078e0064063a0044
047300760556ffd70473005a0000fff90556ffd70473005a0800ffad071d
0057063900c704730006063900c7047300350556005b04000046063900bb
04730064063900bb0473006404e3ffba0400ffae01c7ff080aaa005b09c7
005b0873006c063900c7047300350846005604f1000405c7006404730044
0556ffd70473005a0556ffd70473005a0556005c0473006a0556005c0473
006a0239007502390036023900750239007d063900bb04730064063900bb
0473006405c7006002aa004405c7006002aa004405c700c60473008005c7
00c604730080055600900400004e04e300ff02390061045cffd6037effb5
05c7005604730044055a005604d6006404d6006404e30032040000280556
ffd70473005a0556005c0473006a063900bb0473006400000035063900bb
04730064063900bb04730064063900bb04730064055600ef040000000473
00880473006c04730044047300440400003c040000100473006c0473006c
0473007105a200760384004503b8001f04ed001f041200640239ff380473
00350473003504670064040200a604ef007c0473007c0473004404730044
01c7001f01c7003e02d9000001c7ffcf01c7fff001c700070482003006aa
006d06aa006d06aa00430473ff100473004404a9003f0473006406200064
063b00640473006402aaffb002aaffb002aaffb002aaffed02aa001502aa
004402aa007504460044044600410400ffd70253ff380271ff3802510059
02c8ff330239002b0239001c047300420481005b046600960400ffd305c7
ffd30400ffdd041e009504000028046100280400ffae0400ffcc040000ca
040000c70400003704000023063900bb0418004404120059046700640467
003f0258ff1f0400ffd703950044047300690400003d04000083076b006c
073e006c07c7006c055e007603b0007305ab00730602005d0522003604bf
003603e20064043800130277003a0277003a00faffa201c1003a01c1001e
01c10027029d003a041400d302c9004f0187010402d7011501c7010801c7
010001c7013302aa01c002aa01ad02d900de02d900d504ac00b804ac00b8
04ac00ad04ac00ad02aa01d902aa015a02aa012a02aa012102aaff9502aa
005e02aafffb023900700239015202aa00fb02aa00fb02aa00a602aa00a6
02aa00a602aa001002aa000202aa00a202eb00d600be00400299006302b1
004002d900d5031000960310009603100096031000960310009602aa0062
02aa006202aaffc702aa00c902aa00d60457009604570096045700960457
00960457004304570043045700430457004304570043031000430457002f
0457002f0457002f0457002f0457002f0310002f04570025045700250457
002504570025045700250310002f0457001a0457001a0457001a0457001a
0457001a0310001a04570042045700420457004204570042045700420310
004204570096045700960457009604570096045700420457004204570042
0457004204570042031000420457002f0457002f0457002f0457002f0457
002f0310002f0457002f0457002f0457002f0457002f0457002f0310002f
045700260457002604570026045700260457002603100026045700420457
004204570042045700420457004203100042045700960457009604570096
045700960457004204570042045700420457004204570042031000420457
002604570026045700260457002604570026031000260457002304570023
045700230457002304570023031000230457002f0457002f0457002f0457
002f0457002f0310002f0457004b0457004b0457004b0457004b0457004b
0310004b0457009604570096045700960457009604570042045700420457
00420457004204570042031000420457001a0457001a0457001a0457001a
0457001a0310001a04570024045700240457002404570024045700240310
00240457002f0457002f0457002f0457002f0457002f0310002f0457004e
0457004e0457004e0457004e0457004e0310004e04570096045700960457
0096045700960000ff780000ff6a0000fea20000ffb30000003f0000ff9b
000000150000ffac0000ffd000000091000000250000ff140000ffb30000
ffb3000000200000001100000045000000df0000fedc0000fea70000fee2
0000fef00000ff7d0000ffbb0000ff2c0000feec0000fee90000fee30000
fe400000fe1b0000ff210000fe460000fec60000fee70000fe9b0000fef5
0000ff630000fe210000fe500000fe690000fe260000fe640000fe640000
fe190000fe400000fd1b0000fe5d0000fe950000fea90000fd980000fe16
0000fe620000ff2c0000fe210000fedb0000fe3a0000ffca000000540000
fe6d000000100000ffe70000ff6f0000000d0000ff160000fefb0000ff26
0000fd8d0000feea0000fee70000ff6f0000ff6f0000ff6f0000fe980000
fedf0000fd1f0000ff310000ff2b0000ff530000ff000000ff010000ffc9
0000fef10000ff0e0000ff1d0000ff130000fee10000fe210000ff400000
ffce0000ff4c0000fed002aa015a02aaffe902aa004f040a00430466003c
05ba00ef070e007c05ba00ef04730064063b00640482ffd3063900bb0473
006405c700c80400003704e3005d0306ffe904ff006a043c0056060d00b4
049d00f506c5ffe406aaffe1056300dc047300b20563002b0419ffc80556
00820556008204e0007d04c5008805f700bb046e00640352003302de0045
0482ffd304a200640400007301c7ff08063900bb03870064038700110556
005c05b900570473006a047300800a6a00bb04c2006106140044063b0044
07390043058e00440558ffa50400ffbd070600420572004306a1001d057b
00430831004306d9004404e9004903b8fffd06a5011a05d200c5063900bb
04730064061400fe04b800a2061400fe04b800a208de00bb07590064069f
005004cc001e0a4200bb070200640000feca0a6a00bb04c2006105c700ba
04000073047300390000ff5a0000ff5800000050000000320000fc2b0000
fc4c05b9005704730080053500570435003f055600580473ffeb0528004b
0434004404e9006303b8001f04b7005703c7003f05f100e7048a00790721
0056059b003f08b3005706b7003f05c7008b0400005105c700ba0400006c
04e300ff06aa0043072e00e7052900b0056300db0424009706cd00400514
001f06cd00400514001f023900750756ffb70581ffc50504004b0428002a
057cffeb0483ffd805c7004b0467002a05c700560467003f056300db0424
009706aa005a057c003f02aa00db0556ffd70473005a0556ffd70473005a
0800ffad071d00570556005c0473006a063900c1047300760756ffb70581
ffc504e9006303b8001f04e900630400ffae05b900570473008005b90057
04730080063900bb04730064063900bb04730064058d005a03ef0035051d
00e704000000051d00e704000000051d00e704000000056300db04240097
0717005705e3003f055600490473006c079d004906ab006c077f0108061c
00b804e9010803b800b807d8ffeb06c4ffd8081a005606a5003f063900c7
0467006405dc00ff08ea00430000fec30000ff7900000033000000700000
fffb0000feb9000000320000ffd40000ff7c0000ff700000feb2000000b0
000001360000ff6e0000fe6c000000de0000003d0000fee50000feec0000
feb40000fde20000fef5000000100000fec70000fece0000001d00000021
0000ff7a0000fe9500000041000001ac0000003000000030000000060000
00060000009400000074000000300556ffd70473005a0556005904730044
0556005904730044055600590473004405c700ba0400007305c7005b0473
006c05c7005b0473006c05c7005b0473005f05c7005b0473006c05c7005b
047300560556005c0473006a0556005c0473006a0556005c0473006a0556
005c0473006a0556005c0473006a04e3005d0239005d063900c704730035
05c700560473004405c700560473004405c700560473004405c7fffd0473
fff305c70056047300440239ff4501c7fef5023900750239007d0556005b
040000460556005b040000460556005b040000460473005201c7ffe80473
005201c7ffe80473005201c7ff220473005201c7feff06aa005a06aa0043
06aa005a06aa004306aa005a06aa004305c700640473004405c700640473
004405c700640473004405c7006404730044063900bb04730064063900bb
04730064063900bb04730064063900bb04730064055600580473ffeb0556
00580473ffeb05c7006002aa004405c7006002aafff205c7006002aafff2
05c7006002aaff39055600900400004e055600900400004e055600900400
004e055600900400004e055600900400004e04e300ff0239007304e300ff
0239003804e300c90239ffa804e300ae0239ff7005c700c60473008005c7
00c60473007d05c700c60473008005c700c60473008005c700c604730080
055600fe040000a2055600fe040000a2078d010005c7009f078d010005c7
009f0556ffbf0400fffd0556ffbf0400fffd055600ef0400000004e30032
0400002804e300320400002804e3003204000028047300440239007305c7
009f040000000473005a01c7003604900066049000660490006604900066
049000660490006604900066049000660556ffd70556ffd7068200b80682
00d2068200b8068200d2068200e3068200e3038400450384004503840045
038400450384004503840045061e0082061e00ab07ae00a507ae00bf07ae
00a507ae00bf047100450471004504710045047100450471004504710045
0471004504710045068f0082068f00ab081f00a5081f00bf081f00a5081f
00bf081f00d0081f00d001c7003d01c7003d01c7003d01c7003d01c7003d
01c7003d01c7003d01c7003d03010082030100ab049100a5049100bf0491
00a5049100bf049100d0049100d004730064047300640473006404730064
0473006404730064069d0082069d00ab082d00a5082d00bf07c900a507c9
00bf04660096046600960466009604660096046600960466009604660096
04660096068200ab07ae00bf081200bf07ae00e3063b0064063b0064063b
0064063b0064063b0064063b0064063b0064063b0064067a006b067a006b
080a00a5080a00bf07a600a507a600bf07a600dc07a600dc049000660490
00660384004503840045047100450471004501c7003d01c7003d04730064
047300640466009604660096063b0064063b006404900066049000660490
006604900066049000660490006604900066049000660556ffd70556ffd7
068200b8068200d2068200b8068200d2068200e3068200e30471ffeb0471
ffeb0471ffeb0471ffeb0471ffeb0471ffeb0471ffeb0471ffeb068f0082
068f00ab081f00a5081f00bf081f00a5081f00bf081f00d0081f00d0063b
0064063b0064063b0064063b0064063b0064063b0064063b0064063b0064
067a006b067a006b080a00a5080a00bf07a600a507a600bf07a600dc07a6
00dc04900066049000660490006604900066049000660490006604900066
0556ffd70556ffd70556ffd70556ffd70556ffd702aa016702aa004f02aa
016702aa00c002aa00ed0471ffeb0471ffeb0471ffeb047100450471ffeb
068200d10682007c06f300d106f3007c05c7005602aa00b802aa00b802aa
00e301c7003d01c7003d01c7003d01c7003d01c7003d01c7003d02390075
02390075036500d10365007c02aa00d202aa00d202aa00e3046600960466
009604660096046600960495ffe40495ffe40466009604660096055600ef
055600ef068200a906e6007c061e00ab02aa006102aa006102aa012a063b
0064063b0064063b0064063b0064063b0064076500d1069d007c074200d1
067a006b0616000702aa015a02aa01900473006105c7008f05c700ba06aa
004305c70043090a0060078d002f0556005b04e300a30800ffd70400ffd3
04c100660000ff2b0000ff610000ff320000ff4401c7001f01c7ff08042b
ffa1055600580506006c025aff1f0508004402c8ff8d0555007505550075
02aa001e02aa001e02aa005002aa005002aa003002aa00ac02aafffe02aa
ffce02aaff7b023900b702aa018602aa018602aa002602aa0026032effbe
032effbc02aaffc80000003b0000004a0000ff910000fec20000fefb0000
fefb0000fe410000004a0000ff7b0000ff530000fea2055600580473ffeb
03ffffd205bcff9e071d00570401004004000073047100440471002903c5
004403b8001f01c7ffd6035000150400003c03950022057c003f04b0003f
047300640400003c047300300400fff704e3001c078d008103a8003c0473
006e04730064044800440446ffe804460044041d00cb0466009604730020
0595002304730020040000a205c7009f0400002803b8001f03b8005704db
fff80306003f0400ffd30467003f0448004405d200d40483ffd803ee005d
05bd004803a1007a03a1007a03d0007a039d007a039d007a03eb00a203cf
007a0149007a02ac007a0399007a0302007a046f007a03c9007a03cb007a
03f900a2030f008a0381007a03a7007a032c00de038d00a3052000ea02de
006e02de009602d400ab04bd009f027e003a032c00ab031900ab031900ab
0250007c025000600322008300ff00250286003a03ff003a0275003a0328
00ab02d7008d032800a7032800b302ef0014019000a202d4008f03bc00d0
0435007802dc00cc0388006e0330002802f000da030c00a203810099030c
fffb00ffffe20187ffb002d4000c02dc00510330ffb702f0005e0309ffe9
03810012030cff7305ad001d053d00a105fd005604dc000704e000b005f6
004f053f00a90650ffe104ac00670000fd850000fddb0000fde30473fffc
02aa00ec02d5006e0400000008000000040000000800000002ab00000200
0000015500000473000002390000019a000000ab00000000000005e50053
05c700ba06aa0052057cffea074d00800711006c070c00690556ffd705c7
005f0400ff860473003d04e3ffc1040000600400002604a500c600000102
0000fee50000fe590000000b0000ff530495ff8f05c700a005c700ba05c7
00a0045a00570306003f0000fece0000ffc30000ff4202d200240000fee1
047300440473006c0239ffd006aaffd00473ffb80473ff1c02aaffa002aa
ffa00400004e0239ffc0040000280473ffef030b007a047400050618ffe2
01c7001f01c7001f0473ffeb0466003f04810021047300440473006c0239
ff83058200350400004601c7ff5b06aa0043047300440473ffeb02aaff6f
0400004e0318ff38040000a20400fffd040000280473005a0473006c0473
006c0473006a0384004503b8ffb30514007601c7003d0400ffcb0253ff56
04730080045cffe40309008002da00a702da0068032900a60250006001a5
009701a5ffea0322008302d600b400ff004b00ff006200ff006200ff004b
01e1000400ff003e00ffffce026d006403ff003e03ff005a0275ff6f0275
003902d20052032800b1032800a802c000370187ffe30190004802750038
033700ac027500730275007102dc0047029f004c029f004c02f0004c02bc
002b032900b70000ff6d0000ff8e0000ff0a0000ff830239006f02de000f
0319003103280030030c000b03190023063900c70556ffd70556005805c7
00ba02aa0012049000660490006604900066049000660490006604900066
049000660490006601c7003d01c7003d01c7003d01c7003d01c7003d01c7
003d01c7003d01c7003d0466009604660096046600960466009604660096
04660096046600960466009601c7003d01c7003d01c7003d01c7003d0466
009604660096046600960466009603a0007b0556001f05c700780556ffec
0556005a0473ff860400004401c7ff08060a00bb0473006905c7000c02aa
00330556009f040000000400003c040000730400003c01c70036045aff83
0306ff610556ffbf0400fffd0556ffbf0400fffd04e9006603840045057c
ffd504abffd80000ff5d0000ff9f0000ff980000ffc70000ff2a0000ff27
0000fee4000000330000fe51078b002303eb000b0400003c0473002201c7
00310473ffee0556005805c7002f0473ffb80239ff3705c7005604730044
0556005b0400004604e30032040000280400006b04d000560383003f0538
006f0000fffd000000250000ffcc0000ffa80000ffb00000fee201c7003d
05c9005605c7006405c900ad0000fec00000ff210000feb30000feba0000
feb80000feb70000febd0000fed90000fec50000febc0000fea3063900bd
04730069078d010005c7009f056200560000ff84060a00bb04d000a0084c
010006ba009d0239009d038000cc018700d0018700fe0400009904000099
0239012a0239012c023900d002aaff8804e300c4047300ad0473004a0473
001b0676007605e5ffd80000000000000074000000740000007400000074
000000740000007400000074000000740000007400000074000000740000
007400000074000000740000007400000074000000740000007400000074
000000740000007400000074000000740000007400000074000000740000
007400000074000000740000007400000074000000740000007400000074
000000740000007400000074000000740000007400000074000000740000
007400000074000000740000007400000074000000740000007400000074
000000740000007400000074000000740000007400000074000000740000
007400000074000000740000007400000074000000740000007400000074
00000074000000740000007400000074000001d8000001d8000001d80000
01d8000001d8000001d8000001d8000001d8000001d8000001d8000001d8
000001d8000001d8000001d8000001d8000001d8000001d8000001d80000
01d8000001d8000001d8000001d800000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
000003540000035400000354000003540000035400000354000003540000
035400000354000003540000035400000354000003540000035400000354
00000354000003540001000009fc00f2003c005a000500020010002f0055
00000281024d000400020000000e00ae0000000300000000006a00000000
0003000000070062006a0001000000000000003500cc0001000000000003
0015010100010000000000040015011600010000000000060015012b0001
000000000007003101400003000104090000006a01710003000104090001
002a01db0003000104090002000e02050003000104090003002a02130003
000104090004002a023d0003000104090006002a02670003000104090007
0062029100a90020003200300031003400200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e002e00200041006c006c0020005200690067006800740073
002000520065007300650072007600650064002e0041007200690061006c
00200069007300200061002000740072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002ea920
3230313420546865204d6f6e6f7479706520436f72706f726174696f6e2e
20416c6c205269676874732052657365727665642e4652555958542b4172
69616c2d4974616c69634d544652555958542b417269616c2d4974616c69
634d544652555958542b417269616c2d4974616c69634d54417269616c20
697320612074726164656d61726b206f6620546865204d6f6e6f74797065
20436f72706f726174696f6e2e00a9002000320030003100340020005400
6800650020004d006f006e006f007400790070006500200043006f007200
70006f0072006100740069006f006e002e00200041006c006c0020005200
690067006800740073002000520065007300650072007600650064002e00
4600520055005900580054002b0041007200690061006c002d0049007400
61006c00690063004d00540052006500670075006c006100720046005200
55005900580054002b0041007200690061006c002d004900740061006c00
690063004d0054004600520055005900580054002b004100720069006100
6c002d004900740061006c00690063004d00540046005200550059005800
54002b0041007200690061006c002d004900740061006c00690063004d00
540041007200690061006c00200069007300200061002000740072006100
640065006d00610072006b0020006f006600200054006800650020004d00
6f006e006f007400790070006500200043006f00720070006f0072006100
740069006f006e002e000000b15430bb02aa0001004002a8b2393340b802
a8b310153240b802a8b2073340b802a9b30c12327f411102a600af02a600
bf02a600ef02a60004003002a6004f02a6005f02a60003004002a6b28f33
40b802a6b25f3340b802a6b34e513280b802a6b34c4d3240b802a6b34048
3240b802a6b30a0d3240b802a6b3093a3240b802a6b330333280b802a4b3
45783240b802a4b3323a3280b802a4b32a313240b802a4b32425327f4110
02a4000100ef02a40001000f02a4002f02a4003f02a4007f02a400040040
02a4b3151d3280b802a4b309143240b802a3b31a1b320fbf02a3007f02a3
00ef02a30003004002a3400a091432124f064f0702ef413701eb0001009f
01eb0001007f01eb0001005f01eb0001003f01eb0001002f01eb0001000f
01eb0001007f01ea000100ef01ea000100bf01ea000100af01ea0001002f
01ea0001003f01ea0001004f01ea0001006f01ea0001007f01ea000101ed
01ed01ec01ec01eb01eb01ea01ea4012002c01001f01102c01101f01402c
01401f01b90109010bb2341f91b8010b4037341f2e20431f3220431f3320
471f2c20431f1f20431f7b2a481f2d2a481f212a441f3701000101000901
02000800171700000012110840b801acb7fe870dfd870d0009b8013fb22a
4c1f4109013a00ba0401001f0136001f019a001f0104b22a721fbe010100
20019a001f0100002002abb21ffb2db80156b21ffa1fb80801b21ff91fb8
020140131ff81fe41ff71fbb1ff51f4a1fc92aab1fb92db8019ab21fb81f
b80401b21fa02ab802ab400f1f8b1f521f7b2ae41f781f6c1f6e20b80401
b21f6c21b80401400b1f632aab1f5a2a5a1f5820b802abb21f4e20b80156
b21f471fb8019ab61f452aab1f442ab80101b61f401f891f332db80401b2
1f3221b80401b61f311f721f2e1fb8019ab21f2c1fb80401b21f291fb808
01b21f281fb80801b61f271f6c1f2221b8040140451f550d090d093790dc
0790a80790a607907e07904107903b07903607903507903007902f07902b
07902507901d071408120810080e080c080a080808060804080208000814
b8ffe0402b00000100140610000001000604000001000410000001001002
000001000200000001000002010802004a00b013034b024b5342014bb0c0
63004b6220b0f65323b8010a515ab005234201b0124b004b544218b0382b
4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458
b80119b101018e851bb0124358b900010119858d1bb9000101ff858d5959
0016763f183f123e113946443e113946443e113946443e113946443e1139
4660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b
2b2b2b2b2b4b5079b9001f0158b3071f3d072b2b4b5379b900900158b307
903d072b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb0935320
5c58b901ae01ac4544b901ad01ac45445958b9032c01ae455258b901ae03
2c4459594bb8019a53205c58b9003f01ae4544b901ae01ae45445958b908
d6003f455258b9003f08d64459594bb8040153205c58b9002301ae4544b9
002001ae45445958b916200023455258b9002316204459594bb804015320
5c58b9001e01ad4544b9002a01ad45445958b917e0001e455258b9001e17
e04459594bb8040153205c58b1ba234544b1232345445958b9162000ba45
5258b900ba16204459594bb03c53205c58b11f1f4544b1211f45445958b9
0102001f455258b9001f01024459594bb04653205c58b11f1f4544b12d1f
45445958b9012e001f455258b9001f012e4459594bb8030153205c58b11f
1f4544b11f1f45445958b90d20001f455258b9001f0d204459592b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b65422b2b45695342014b5058b108004259435c58b10800425916
10703eb0124358b90d193ea51bba00d203eb000b2b59b00a2342b00b2342
003f3f182b103c012f060cb0062342b0072342b0124358b93b21187e1bba
040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba040004
00000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b
2b59b0102342b0112342002b2b2b2b2b2b2b2b2b2b2b7474757575750018
456944456944456944456944737373737373737375737373737373737400
4bb02a534bb03f515a58b1070745b040604459004bb030534bb03f515a58
b10b0b45b8ffc0604459004bb02e534bb03c515a58b1030345b040604459
004bb02e534bb03c515a58b1090945b8ffc0604459435c58b64f2c014f1f
01372b7474592b732b2b2b7373742b2b2b2b2b2b2b2b2b2b2b2b74732b2b
2b2b742b000000>
[853 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 472 90 <0001009f000006370426001a01154026e519010f1cdf1c02291947197713
8603800b860c82138518801a9709d514e709e80ae8130e1cb8ffc0b31d21
341cb8ffc040430b1034100f0e0e110d0c0b0b0e151617171418191a1a17
09080706060a050403020206061a000e1317141211110b0b17630a0a0202
0106130e6314141a06631a000a13ba026400140265b71a1c17171a125811
ba01b9000b0264b3c00a010ab801b9b30258011ab80264b30f000100b801
c140090f010101191b8d8c182b4e10e4714df671e610fdf65dfe19f618fd
194e456544e6184d10f6ee003f3ced103c10ed3c3f3c103c10ed3c103c10
3c011239113911123987100e7dc4c4c487100ec4c4c487100ec4c487100e
c4c487100ec4c487100ec4c43130012b2b5d71005d210333131316173636
371333131617363713330123032627060701010e6fae301302041e2a2efd
c52308023271e4b5fdf9bc2804022938fee70426fe23fef41e5b666d6502
2afded79ca86ee01e2fbda026f3aa86b7cfd9600>EUBBAA+Arial-ItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007004ab10201bb012e000600070237b200
0504b8012eb403000a0704b8012eb5010019080605bb012e000200030143
b3095bbe182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c3130
211121112521112101000400fc2003c0fc400500fb002004c000>EUBBAA+Arial-ItalicMT AddT42Char 
EUBBAA+Arial-ItalicMT /CharStrings get begin
/w 90 def
end
EUBBAA+Arial-ItalicMT /Encoding get
dup 119 /w put
pop
end
%ADOEndSubsetFont
/ZIUVON+Arial-ItalicMT /EUBBAA+Arial-ItalicMT findfont ct_VMDictPut
/ZIUVON+Arial-ItalicMT*1 
[119{/.notdef}rp /w 136{/.notdef}rp]
ZIUVON+Arial-ItalicMT nf
ZIUVON+Arial-ItalicMT*1 [21 0 0 -21 0 0 ]msf
144.97 235.314 mo
(w)sh
ZIUVOL+ArialMT*1 [14.9092 0 0 -14.9092 0 0 ]msf
161.5 239.814 mo
(op)
[8.33424 0 ]xsh
178.168 239.814 mo
(t)sh
gsave
0 0 mo
310 0 li
310 245 li
0 245 li
cp
clp
%ADOBeginSubsetFont: VSTBAA+MathematicaSans AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZIUVOM+MathematicaSans dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/less <1C60D8A8C9B7C7F3FCFFFDB158B184D698E7C36FB55E741160F1ABFA7
51A15BEF16FBEFF6522AE75A61D37AA759E989DF0FC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZIUVOM+MathematicaSans /Encoding get
dup 60 /less put
pop
%ADOEndSubsetFont
/ZIUVOM+MathematicaSans*1 
[45{/.notdef}rp /hyphen /.notdef /slash 12{/.notdef}rp /less 195{/.notdef}rp]
ZIUVOM+MathematicaSans nf
ZIUVOM+MathematicaSans*1 [21 0 0 -21 0 0 ]msf
-.5 21 mo
(<)sh
grestore
%ADOBeginSubsetFont: EUBBAA+Arial-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal EUBBAA+Arial-ItalicMT gcheck setglobal} if
1 116 68 <0002005affe80436043e0027003500c140515b2d01250a250b230c252c3a
014a01062f0839085721672104342c2a0b042f28260d030f00251e23282b
03130d0a321a282b2b2c0a0d140a0a0d16241f17011752131f1a07260a32
1f030b17580f160116b801c3401e2f200626360f201e0058102370230223
ff1e40111234001e101e6f1e031ebc027800370026027800182b4e10e65d
2b4df65ded10ed4e10f44dfdf65ded003fed3f3fedfd5de4870e2e2b0e7d
10c400111239391112393901111239111217391217393130015d005d5d25
060623222635343636373624373635342726232206072736363332171615
140703061514172326130606070e021514163332363603105eae6393b451
86613d01554a152e3f79729121b738f3b9c57358193b1c16b70f3d265766
9e824269615aa66084514bad87598953120c0e1d4a313f2432655d109ea8
5e46705570fef87e4f325e3401e60f10090e2b5e394c625faa00>EUBBAA+Arial-ItalicMT AddT42Char 
EUBBAA+Arial-ItalicMT /CharStrings get begin
/a 68 def
end
EUBBAA+Arial-ItalicMT /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZIUVON+Arial-ItalicMT*1 
[97{/.notdef}rp /a 21{/.notdef}rp /w 136{/.notdef}rp]
ZIUVON+Arial-ItalicMT nf
ZIUVON+Arial-ItalicMT*1 [21 0 0 -21 0 0 ]msf
12.478 21 mo
(a)sh
gsave
0 0 mo
310 0 li
310 245 li
0 245 li
cp
clp
%ADOBeginSubsetFont: VSTBAA+MathematicaSans AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZIUVOM+MathematicaSans dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B7C7F3FCFFFDB16D71949556271E5F2AA88700268763C9A
CD3F9E0997704EFB58B3C8E85BE2CD24BB97B678052C8703CE2AE55> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZIUVOM+MathematicaSans /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/ZIUVOM+MathematicaSans*1 
[43{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash 12{/.notdef}rp /less 
195{/.notdef}rp]
ZIUVOM+MathematicaSans nf
ZIUVOM+MathematicaSans*1 [14.9092 0 0 -14.9092 0 0 ]msf
27.5 10.2002 mo
(+)sh
%ADOBeginSubsetFont: DMSAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DMSAAA+ArialMT gcheck setglobal} if
2 3228 68 <0002004affe8041c043e00280037022d402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe040550c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030e0c0f0f
02550eb8ffeab4101002550eb8fff44015101006550e0c0d0d06550e060f
0f06550e0e1c0317b802aab61895141c1c0700b8fff4401a0c0c06550045
270a321c030b2961106100060d0d025500252124b8ffecb41010025524b8
ffec400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b
065524b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b802
5b400e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b6
0e0e0255263139b8ffc0400d1e23343039c03902a039013917b8fff44041
10100655172518222f24bf06cf06021f063f0602060e0f0f0255060c0d0d
025506180c0c0255060c0b0b0255060c0b0b0655060e0d0d065506100c0c
065506313810f62b2b2b2b2b2b2b5d71edf4ed2b105d712bf62b2b5dedf4
2b2b2b2b2b2b2b2b3cfd2be5e5003fed3fe42b3fedfde41112392f2b2b2b
2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d2b
2b0071250606232226353436363736373637363534272623220607273e02
333216161716151514161723260306070e02151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>DMSAAA+ArialMT AddT42Char 
DMSAAA+ArialMT /CharStrings get begin
/a 68 def
end
DMSAAA+ArialMT /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZIUVOL+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 40{/.notdef}rp /a 13{/.notdef}rp /o 
/p 3{/.notdef}rp /t 2{/.notdef}rp /w 136{/.notdef}rp]
ZIUVOL+ArialMT nf
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
37.5 21 mo
(a)sh
grestore
%ADOBeginSubsetFont: VSTBAA+MathematicaSans AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZIUVOM+MathematicaSans dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CF
0E48D8A711D412E34AAB2732DF92ADCDC95C7C6D97E8C44CE2751654BC55BD12
CD842E> |-
/greater <1C60D8A8C9B7C7F3FCFFFDB158B184E3A87342224D39972949AA7D
72E56B6F8812323673BFA1A5A6430DFA47C9593AB4108B0AB2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZIUVOM+MathematicaSans /Encoding get
dup 40 /parenleft put
dup 62 /greater put
pop
%ADOEndSubsetFont
/ZIUVOM+MathematicaSans*1 
[40{/.notdef}rp /parenleft 2{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash 
12{/.notdef}rp /less /.notdef /greater 193{/.notdef}rp]
ZIUVOM+MathematicaSans nf
ZIUVOM+MathematicaSans*1 [21 0 0 -21 0 0 ]msf
50.499 21 mo
(>)sh
63.477 21 mo
(/)sh
72.066 21 mo
(\()sh
gsave
0 0 mo
310 0 li
310 245 li
0 245 li
cp
clp
%ADOBeginSubsetFont: DMSAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DMSAAA+ArialMT gcheck setglobal} if
2 2802 49 <0001009c0000051f05ba0009017db1120bb8ffc0400a13153408180c1602
5503b8ffe840210c16025508020303200708140707080207030308090402
02090708040320060605b8ffecb40f0f025505b8fff2400b0d0d02550512
0c0c025505b8fff7401a0b0b0655055d200b01200b500b600b700b800b05
0b0809200100b8ffc0400d13153420000100201010025500b8fff6b40f0f
025500b8fff6b40d0d025500b8fffa400b0c0c025500040b0b065500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d0a3b59182b10f62b2b2b2b2b
2b2b5d2b3cfd3c105d71f42b2b2b2b3c10fd3c003f3c3f3c123939011139
3987042e2b877dc4b10602435458b90003ffe0b70c113408200c1134002b
2b5931302b2b012b435c58b40840463903b8ffc0b646390840323903b8ff
c0b632390722193902b8ffdeb619390722323902b8ffdeb6323907222339
02b8ffde400b2339070e1439070e133902b8fff4b61339070e1d3902b8ff
f4b61d39070e153902b8fff8b115392b2b2b2b2b2b2b012b2b2b2b2b2b00
2b2b2b2b59331133011133112301119cc70302bac7fcfe05bafb81047ffa
460480fb8000>DMSAAA+ArialMT AddT42Char 
DMSAAA+ArialMT /CharStrings get begin
/N 49 def
end
DMSAAA+ArialMT /Encoding get
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZIUVOL+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 21{/.notdef}rp /N 18{/.notdef}rp /a 
13{/.notdef}rp /o /p 3{/.notdef}rp /t 2{/.notdef}rp /w 136{/.notdef}rp]
ZIUVOL+ArialMT nf
ZIUVOL+ArialMT*1 [21 0 0 -21 0 0 ]msf
77.4419 21 mo
(N)sh
103.335 5.7114 mo
103.007 7.2294 li
101.611 7.2294 li
101.353 7.2294 101.078 7.24141 100.791 7.2644 cv
100.505 7.2894 100.22 7.3304 99.9405 7.38741 cv
99.6605 7.4464 99.3915 7.5294 99.1355 7.6394 cv
98.8785 7.7484 98.6555 7.88741 98.4635 8.0544 cv
98.2725 8.2224 98.1185 8.4274 98.0025 8.6694 cv
97.8865 8.9124 97.8285 9.1974 97.8285 9.52541 cv
97.8285 9.84041 97.9255 10.0934 98.1205 10.2844 cv
98.3145 10.4764 98.5615 10.6234 98.8585 10.7254 cv
99.1555 10.8284 99.4855 10.8964 99.8485 10.9304 cv
100.211 10.9644 100.56 10.9824 100.895 10.9824 cv
101.086 10.9824 101.264 10.9784 101.433 10.9714 cv
101.6 10.9644 101.752 10.9584 101.888 10.9514 cv
101.929 10.9514 101.968 10.9494 102.007 10.9464 cv
102.044 10.9424 102.08 10.9404 102.115 10.9404 cv
101.797 12.4484 li
101.072 12.4484 100.374 12.5494 99.7045 12.7514 cv
99.0345 12.9524 98.4165 13.2784 97.8485 13.7304 cv
97.5755 13.9484 97.3165 14.1934 97.0745 14.4624 cv
96.8315 14.7334 96.6185 15.0224 96.4335 15.3294 cv
96.2495 15.6374 96.1035 15.9604 95.9975 16.2984 cv
95.8915 16.6364 95.8385 16.9874 95.8385 17.3494 cv
95.8385 17.7394 95.9125 18.0514 96.0595 18.2884 cv
96.2065 18.5234 96.4005 18.7114 96.6435 18.8514 cv
96.8865 18.9924 97.1635 19.0994 97.4745 19.1744 cv
97.7855 19.2504 98.1035 19.3184 98.4275 19.3794 cv
98.7525 19.4414 99.0705 19.5094 99.3815 19.5854 cv
99.6925 19.6604 99.9695 19.7734 100.212 19.9234 cv
100.454 20.0734 100.649 20.2744 100.797 20.5234 cv
100.943 20.7734 101.018 21.0994 101.018 21.5024 cv
101.018 22.1454 100.867 22.7074 100.565 23.1894 cv
100.266 23.6704 99.8785 24.0724 99.4075 24.3944 cv
98.9355 24.7154 98.4095 24.9594 97.8285 25.1274 cv
97.2475 25.2944 96.6765 25.3884 96.1155 25.4094 cv
96.9665 23.7074 li
97.2065 23.6864 97.4555 23.6404 97.7155 23.5684 cv
97.9755 23.4974 98.2125 23.3944 98.4275 23.2604 cv
98.6435 23.1284 98.8205 22.9584 98.9605 22.7534 cv
99.1015 22.5484 99.1715 22.3024 99.1715 22.0154 cv
99.1715 21.7824 99.0965 21.6054 98.9455 21.4824 cv
98.7955 21.3584 98.5975 21.2594 98.3515 21.1844 cv
98.1055 21.1094 97.8245 21.0474 97.5105 21.0004 cv
97.1955 20.9524 96.8725 20.8904 96.5415 20.8154 cv
96.2095 20.7404 95.8865 20.6374 95.5725 20.5074 cv
95.2575 20.3784 94.9775 20.1964 94.7315 19.9644 cv
94.4855 19.7324 94.2875 19.4334 94.1365 19.0674 cv
93.9865 18.7014 93.9115 18.2454 93.9115 17.6984 cv
93.9115 17.0354 94.0345 16.4094 94.2805 15.8214 cv
94.5265 15.2334 94.8545 14.6974 95.2645 14.2114 cv
95.6745 13.7264 96.1475 13.2974 96.6845 12.9244 cv
97.2215 12.5524 97.7805 12.2464 98.3615 12.0074 cv
98.0535 11.9594 97.7645 11.8724 97.4945 11.7464 cv
97.2245 11.6194 96.9885 11.4594 96.7875 11.2634 cv
96.5855 11.0694 96.4285 10.8384 96.3155 10.5714 cv
96.2025 10.3054 96.1465 10.0044 96.1465 9.6694 cv
96.1465 9.2114 96.2255 8.7964 96.3825 8.4234 cv
96.5395 8.05141 96.7495 7.71741 97.0125 7.4234 cv
97.2755 7.12941 97.5855 6.8754 97.9405 6.6604 cv
98.2965 6.4444 98.6725 6.26741 99.0685 6.1274 cv
99.4655 5.9864 99.8725 5.8824 100.289 5.81441 cv
100.706 5.74541 101.109 5.7114 101.499 5.7114 cv
cp
f
grestore
%ADOBeginSubsetFont: VSTBAA+MathematicaSans AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZIUVOM+MathematicaSans dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B84E0A47D7FED609B3683507871E5C5015E3549BF
91653A329EF8D5BF37DF948A5A8471707D087A577F9EE79FD91DC92667BCDE58
8EC87D3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZIUVOM+MathematicaSans /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/ZIUVOM+MathematicaSans*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /.notdef 
/slash 12{/.notdef}rp /less /.notdef /greater 193{/.notdef}rp]
ZIUVOM+MathematicaSans nf
ZIUVOM+MathematicaSans*1 [21 0 0 -21 0 0 ]msf
105.456 21 mo
(\))sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/ZIUVON+Arial-ItalicMT*1 uf
/ZIUVON+Arial-ItalicMT uf
/EUBBAA+Arial-ItalicMT uf
/ZIUVOM+MathematicaSans*1 uf
/ZIUVOM+MathematicaSans uf
/VSTBAA+MathematicaSans uf
/ZIUVOL+ArialMT*1 uf
/ZIUVOL+ArialMT uf
/DMSAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
